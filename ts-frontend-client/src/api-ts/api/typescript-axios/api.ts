/* tslint:disable */
/* eslint-disable */
/**
 * Hello API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface ApiChecklistsGetCollection200Response
 */
export interface ApiChecklistsGetCollection200Response {
    /**
     *
     * @type {Array<ChecklistJsonldRecordRead>}
     * @memberof ApiChecklistsGetCollection200Response
     */
    'hydra:member': Array<ChecklistJsonldRecordRead>;
    /**
     *
     * @type {number}
     * @memberof ApiChecklistsGetCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraView}
     * @memberof ApiChecklistsGetCollection200Response
     */
    'hydra:view'?: ApiChecklistsGetCollection200ResponseHydraView;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraSearch}
     * @memberof ApiChecklistsGetCollection200Response
     */
    'hydra:search'?: ApiChecklistsGetCollection200ResponseHydraSearch;
}
/**
 *
 * @export
 * @interface ApiChecklistsGetCollection200ResponseHydraSearch
 */
export interface ApiChecklistsGetCollection200ResponseHydraSearch {
    /**
     *
     * @type {string}
     * @memberof ApiChecklistsGetCollection200ResponseHydraSearch
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiChecklistsGetCollection200ResponseHydraSearch
     */
    'hydra:template'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiChecklistsGetCollection200ResponseHydraSearch
     */
    'hydra:variableRepresentation'?: string;
    /**
     *
     * @type {Array<ApiChecklistsGetCollection200ResponseHydraSearchHydraMappingInner>}
     * @memberof ApiChecklistsGetCollection200ResponseHydraSearch
     */
    'hydra:mapping'?: Array<ApiChecklistsGetCollection200ResponseHydraSearchHydraMappingInner>;
}
/**
 *
 * @export
 * @interface ApiChecklistsGetCollection200ResponseHydraSearchHydraMappingInner
 */
export interface ApiChecklistsGetCollection200ResponseHydraSearchHydraMappingInner {
    /**
     *
     * @type {string}
     * @memberof ApiChecklistsGetCollection200ResponseHydraSearchHydraMappingInner
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiChecklistsGetCollection200ResponseHydraSearchHydraMappingInner
     */
    'variable'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiChecklistsGetCollection200ResponseHydraSearchHydraMappingInner
     */
    'property'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ApiChecklistsGetCollection200ResponseHydraSearchHydraMappingInner
     */
    'required'?: boolean;
}
/**
 *
 * @export
 * @interface ApiChecklistsGetCollection200ResponseHydraView
 */
export interface ApiChecklistsGetCollection200ResponseHydraView {
    /**
     *
     * @type {string}
     * @memberof ApiChecklistsGetCollection200ResponseHydraView
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiChecklistsGetCollection200ResponseHydraView
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiChecklistsGetCollection200ResponseHydraView
     */
    'hydra:first'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiChecklistsGetCollection200ResponseHydraView
     */
    'hydra:last'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiChecklistsGetCollection200ResponseHydraView
     */
    'hydra:previous'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiChecklistsGetCollection200ResponseHydraView
     */
    'hydra:next'?: string;
}
/**
 *
 * @export
 * @interface ApiFileReportFileFieldsGetCollection200Response
 */
export interface ApiFileReportFileFieldsGetCollection200Response {
    /**
     *
     * @type {Array<FileReportFileFieldJsonld>}
     * @memberof ApiFileReportFileFieldsGetCollection200Response
     */
    'hydra:member': Array<FileReportFileFieldJsonld>;
    /**
     *
     * @type {number}
     * @memberof ApiFileReportFileFieldsGetCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraView}
     * @memberof ApiFileReportFileFieldsGetCollection200Response
     */
    'hydra:view'?: ApiChecklistsGetCollection200ResponseHydraView;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraSearch}
     * @memberof ApiFileReportFileFieldsGetCollection200Response
     */
    'hydra:search'?: ApiChecklistsGetCollection200ResponseHydraSearch;
}
/**
 *
 * @export
 * @interface ApiIssuesGetCollection200Response
 */
export interface ApiIssuesGetCollection200Response {
    /**
     *
     * @type {Array<IssueJsonldRecordRead>}
     * @memberof ApiIssuesGetCollection200Response
     */
    'hydra:member': Array<IssueJsonldRecordRead>;
    /**
     *
     * @type {number}
     * @memberof ApiIssuesGetCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraView}
     * @memberof ApiIssuesGetCollection200Response
     */
    'hydra:view'?: ApiChecklistsGetCollection200ResponseHydraView;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraSearch}
     * @memberof ApiIssuesGetCollection200Response
     */
    'hydra:search'?: ApiChecklistsGetCollection200ResponseHydraSearch;
}
/**
 *
 * @export
 * @interface ApiNotesGetCollection200Response
 */
export interface ApiNotesGetCollection200Response {
    /**
     *
     * @type {Array<NoteJsonldRecordRead>}
     * @memberof ApiNotesGetCollection200Response
     */
    'hydra:member': Array<NoteJsonldRecordRead>;
    /**
     *
     * @type {number}
     * @memberof ApiNotesGetCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraView}
     * @memberof ApiNotesGetCollection200Response
     */
    'hydra:view'?: ApiChecklistsGetCollection200ResponseHydraView;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraSearch}
     * @memberof ApiNotesGetCollection200Response
     */
    'hydra:search'?: ApiChecklistsGetCollection200ResponseHydraSearch;
}
/**
 *
 * @export
 * @interface ApiRecordsGetCollection200Response
 */
export interface ApiRecordsGetCollection200Response {
    /**
     *
     * @type {Array<RecordJsonldRecordRead>}
     * @memberof ApiRecordsGetCollection200Response
     */
    'hydra:member': Array<RecordJsonldRecordRead>;
    /**
     *
     * @type {number}
     * @memberof ApiRecordsGetCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraView}
     * @memberof ApiRecordsGetCollection200Response
     */
    'hydra:view'?: ApiChecklistsGetCollection200ResponseHydraView;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraSearch}
     * @memberof ApiRecordsGetCollection200Response
     */
    'hydra:search'?: ApiChecklistsGetCollection200ResponseHydraSearch;
}
/**
 *
 * @export
 * @interface ApiReportFieldsGetCollection200Response
 */
export interface ApiReportFieldsGetCollection200Response {
    /**
     *
     * @type {Array<ReportFieldJsonldReportFieldRead>}
     * @memberof ApiReportFieldsGetCollection200Response
     */
    'hydra:member': Array<ReportFieldJsonldReportFieldRead>;
    /**
     *
     * @type {number}
     * @memberof ApiReportFieldsGetCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraView}
     * @memberof ApiReportFieldsGetCollection200Response
     */
    'hydra:view'?: ApiChecklistsGetCollection200ResponseHydraView;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraSearch}
     * @memberof ApiReportFieldsGetCollection200Response
     */
    'hydra:search'?: ApiChecklistsGetCollection200ResponseHydraSearch;
}
/**
 *
 * @export
 * @interface ApiReportTemplatesGetCollection200Response
 */
export interface ApiReportTemplatesGetCollection200Response {
    /**
     *
     * @type {Array<ReportTemplateJsonldReportRead>}
     * @memberof ApiReportTemplatesGetCollection200Response
     */
    'hydra:member': Array<ReportTemplateJsonldReportRead>;
    /**
     *
     * @type {number}
     * @memberof ApiReportTemplatesGetCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraView}
     * @memberof ApiReportTemplatesGetCollection200Response
     */
    'hydra:view'?: ApiChecklistsGetCollection200ResponseHydraView;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraSearch}
     * @memberof ApiReportTemplatesGetCollection200Response
     */
    'hydra:search'?: ApiChecklistsGetCollection200ResponseHydraSearch;
}
/**
 *
 * @export
 * @interface ApiReportsGetCollection200Response
 */
export interface ApiReportsGetCollection200Response {
    /**
     *
     * @type {Array<ReportJsonldReportRead>}
     * @memberof ApiReportsGetCollection200Response
     */
    'hydra:member': Array<ReportJsonldReportRead>;
    /**
     *
     * @type {number}
     * @memberof ApiReportsGetCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraView}
     * @memberof ApiReportsGetCollection200Response
     */
    'hydra:view'?: ApiChecklistsGetCollection200ResponseHydraView;
    /**
     *
     * @type {ApiChecklistsGetCollection200ResponseHydraSearch}
     * @memberof ApiReportsGetCollection200Response
     */
    'hydra:search'?: ApiChecklistsGetCollection200ResponseHydraSearch;
}
/**
 *
 * @export
 * @interface ChecklistJsonldRecordRead
 */
export interface ChecklistJsonldRecordRead {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ChecklistJsonldRecordRead
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ChecklistJsonldRecordRead
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ChecklistJsonldRecordRead
     */
    '@type'?: string;
}
/**
 * @type ChecklistJsonldRecordReadContext
 * @export
 */
export type ChecklistJsonldRecordReadContext = ChecklistJsonldRecordReadContextOneOf | string;

/**
 *
 * @export
 * @interface ChecklistJsonldRecordReadContextOneOf
 */
export interface ChecklistJsonldRecordReadContextOneOf {
    [key: string]: any;

    /**
     *
     * @type {string}
     * @memberof ChecklistJsonldRecordReadContextOneOf
     */
    '@vocab': string;
    /**
     *
     * @type {string}
     * @memberof ChecklistJsonldRecordReadContextOneOf
     */
    'hydra': ChecklistJsonldRecordReadContextOneOfHydraEnum;
}

export const ChecklistJsonldRecordReadContextOneOfHydraEnum = {
    HttpWwwW3OrgNsHydraCore: 'http://www.w3.org/ns/hydra/core#'
} as const;

export type ChecklistJsonldRecordReadContextOneOfHydraEnum = typeof ChecklistJsonldRecordReadContextOneOfHydraEnum[keyof typeof ChecklistJsonldRecordReadContextOneOfHydraEnum];

/**
 *
 * @export
 * @interface ChecklistJsonldRecordWrite
 */
export interface ChecklistJsonldRecordWrite {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ChecklistJsonldRecordWrite
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ChecklistJsonldRecordWrite
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ChecklistJsonldRecordWrite
     */
    '@type'?: string;
}
/**
 *
 * @export
 * @interface FileReportFileField
 */
export interface FileReportFileField {
    /**
     *
     * @type {string}
     * @memberof FileReportFileField
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof FileReportFileField
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof FileReportFileField
     */
    'updatedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof FileReportFileField
     */
    'deletedAt'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FileReportFileField
     */
    'deleted'?: boolean;
}
/**
 *
 * @export
 * @interface FileReportFileFieldJsonld
 */
export interface FileReportFileFieldJsonld {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof FileReportFileFieldJsonld
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof FileReportFileFieldJsonld
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof FileReportFileFieldJsonld
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof FileReportFileFieldJsonld
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof FileReportFileFieldJsonld
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof FileReportFileFieldJsonld
     */
    'updatedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof FileReportFileFieldJsonld
     */
    'deletedAt'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FileReportFileFieldJsonld
     */
    'deleted'?: boolean;
}
/**
 *
 * @export
 * @interface IssueJsonldRecordRead
 */
export interface IssueJsonldRecordRead {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof IssueJsonldRecordRead
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof IssueJsonldRecordRead
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueJsonldRecordRead
     */
    '@type'?: string;
}
/**
 *
 * @export
 * @interface IssueJsonldRecordWrite
 */
export interface IssueJsonldRecordWrite {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof IssueJsonldRecordWrite
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof IssueJsonldRecordWrite
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof IssueJsonldRecordWrite
     */
    '@type'?: string;
}
/**
 *
 * @export
 * @interface NoteJsonldRecordRead
 */
export interface NoteJsonldRecordRead {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof NoteJsonldRecordRead
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof NoteJsonldRecordRead
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof NoteJsonldRecordRead
     */
    '@type'?: string;
}
/**
 *
 * @export
 * @interface NoteJsonldRecordWrite
 */
export interface NoteJsonldRecordWrite {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof NoteJsonldRecordWrite
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof NoteJsonldRecordWrite
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof NoteJsonldRecordWrite
     */
    '@type'?: string;
}
/**
 *
 * @export
 * @interface RecordJsonldRecordRead
 */
export interface RecordJsonldRecordRead {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof RecordJsonldRecordRead
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof RecordJsonldRecordRead
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof RecordJsonldRecordRead
     */
    '@type'?: string;
}
/**
 *
 * @export
 * @interface RecordJsonldRecordWrite
 */
export interface RecordJsonldRecordWrite {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof RecordJsonldRecordWrite
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof RecordJsonldRecordWrite
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof RecordJsonldRecordWrite
     */
    '@type'?: string;
}
/**
 *
 * @export
 * @interface ReportBasicFieldJsonldReportBasicFieldRead
 */
export interface ReportBasicFieldJsonldReportBasicFieldRead {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportBasicFieldJsonldReportBasicFieldRead
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportBasicFieldJsonldReportBasicFieldRead
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportBasicFieldJsonldReportBasicFieldRead
     */
    '@type'?: string;
}
/**
 *
 * @export
 * @interface ReportBasicFieldJsonldReportBasicFieldWrite
 */
export interface ReportBasicFieldJsonldReportBasicFieldWrite {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportBasicFieldJsonldReportBasicFieldWrite
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportBasicFieldJsonldReportBasicFieldWrite
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportBasicFieldJsonldReportBasicFieldWrite
     */
    '@type'?: string;
}
/**
 *
 * @export
 * @interface ReportFieldJsonldReportFieldRead
 */
export interface ReportFieldJsonldReportFieldRead {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportFieldJsonldReportFieldRead
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportFieldJsonldReportFieldRead
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportFieldJsonldReportFieldRead
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportFieldJsonldReportFieldRead
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportFieldJsonldReportFieldRead
     */
    'reportFieldType'?: string;
    /**
     *
     * @type {number}
     * @memberof ReportFieldJsonldReportFieldRead
     */
    'sortOrder'?: number;
}
/**
 *
 * @export
 * @interface ReportFieldReportFieldRead
 */
export interface ReportFieldReportFieldRead {
    /**
     *
     * @type {string}
     * @memberof ReportFieldReportFieldRead
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportFieldReportFieldRead
     */
    'reportFieldType'?: string;
    /**
     *
     * @type {number}
     * @memberof ReportFieldReportFieldRead
     */
    'sortOrder'?: number;
}
/**
 *
 * @export
 * @interface ReportFileFieldJsonldReportFileFieldRead
 */
export interface ReportFileFieldJsonldReportFileFieldRead {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportFileFieldJsonldReportFileFieldRead
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportFileFieldJsonldReportFileFieldRead
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportFileFieldJsonldReportFileFieldRead
     */
    '@type'?: string;
}
/**
 *
 * @export
 * @interface ReportFileFieldJsonldReportFileFieldWrite
 */
export interface ReportFileFieldJsonldReportFileFieldWrite {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportFileFieldJsonldReportFileFieldWrite
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportFileFieldJsonldReportFileFieldWrite
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportFileFieldJsonldReportFileFieldWrite
     */
    '@type'?: string;
}
/**
 *
 * @export
 * @interface ReportFilterFieldJsonldReportFilterFieldRead
 */
export interface ReportFilterFieldJsonldReportFilterFieldRead {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportFilterFieldJsonldReportFilterFieldRead
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportFilterFieldJsonldReportFilterFieldRead
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportFilterFieldJsonldReportFilterFieldRead
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportFilterFieldJsonldReportFilterFieldRead
     */
    'filter'?: string | null;
}
/**
 *
 * @export
 * @interface ReportFilterFieldJsonldReportFilterFieldWrite
 */
export interface ReportFilterFieldJsonldReportFilterFieldWrite {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportFilterFieldJsonldReportFilterFieldWrite
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportFilterFieldJsonldReportFilterFieldWrite
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportFilterFieldJsonldReportFilterFieldWrite
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportFilterFieldJsonldReportFilterFieldWrite
     */
    'filter'?: string | null;
}
/**
 *
 * @export
 * @interface ReportFilterFieldReportFilterFieldRead
 */
export interface ReportFilterFieldReportFilterFieldRead {
    /**
     *
     * @type {string}
     * @memberof ReportFilterFieldReportFilterFieldRead
     */
    'filter'?: string | null;
}
/**
 *
 * @export
 * @interface ReportFilterFieldReportFilterFieldWrite
 */
export interface ReportFilterFieldReportFilterFieldWrite {
    /**
     *
     * @type {string}
     * @memberof ReportFilterFieldReportFilterFieldWrite
     */
    'filter'?: string | null;
}
/**
 *
 * @export
 * @interface ReportJsonldReportRead
 */
export interface ReportJsonldReportRead {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportJsonldReportRead
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportJsonldReportRead
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportJsonldReportRead
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportJsonldReportRead
     */
    'filter'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportJsonldReportRead
     */
    'publishedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportJsonldReportRead
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportJsonldReportRead
     */
    'supportingText'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ReportJsonldReportRead
     */
    'isArchived'?: boolean;
    /**
     *
     * @type {Array<ReportSectionJsonldReportRead>}
     * @memberof ReportJsonldReportRead
     */
    'sections'?: Array<ReportSectionJsonldReportRead>;
}
/**
 *
 * @export
 * @interface ReportJsonldReportWrite
 */
export interface ReportJsonldReportWrite {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportJsonldReportWrite
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportJsonldReportWrite
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportJsonldReportWrite
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportJsonldReportWrite
     */
    'filter'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportJsonldReportWrite
     */
    'publishedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportJsonldReportWrite
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportJsonldReportWrite
     */
    'supportingText'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ReportJsonldReportWrite
     */
    'isArchived'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportJsonldReportWrite
     */
    'sections'?: Array<string>;
}
/**
 *
 * @export
 * @interface ReportReportRead
 */
export interface ReportReportRead {
    /**
     *
     * @type {string}
     * @memberof ReportReportRead
     */
    'filter'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportReportRead
     */
    'publishedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportReportRead
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportReportRead
     */
    'supportingText'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ReportReportRead
     */
    'isArchived'?: boolean;
    /**
     *
     * @type {Array<ReportSectionReportRead>}
     * @memberof ReportReportRead
     */
    'sections'?: Array<ReportSectionReportRead>;
}
/**
 *
 * @export
 * @interface ReportReportWrite
 */
export interface ReportReportWrite {
    /**
     *
     * @type {string}
     * @memberof ReportReportWrite
     */
    'filter'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportReportWrite
     */
    'publishedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportReportWrite
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportReportWrite
     */
    'supportingText'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ReportReportWrite
     */
    'isArchived'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportReportWrite
     */
    'sections'?: Array<string>;
}
/**
 *
 * @export
 * @interface ReportSectionJsonldReportRead
 */
export interface ReportSectionJsonldReportRead {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportSectionJsonldReportRead
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportSectionJsonldReportRead
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportSectionJsonldReportRead
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportSectionJsonldReportRead
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ReportSectionJsonldReportSectionRead
 */
export interface ReportSectionJsonldReportSectionRead {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportSectionJsonldReportSectionRead
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportSectionJsonldReportSectionRead
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportSectionJsonldReportSectionRead
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportSectionJsonldReportSectionRead
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ReportSectionJsonldReportSectionWrite
 */
export interface ReportSectionJsonldReportSectionWrite {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportSectionJsonldReportSectionWrite
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportSectionJsonldReportSectionWrite
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportSectionJsonldReportSectionWrite
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportSectionJsonldReportSectionWrite
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ReportSectionReportRead
 */
export interface ReportSectionReportRead {
    /**
     *
     * @type {string}
     * @memberof ReportSectionReportRead
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ReportSectionReportSectionRead
 */
export interface ReportSectionReportSectionRead {
    /**
     *
     * @type {string}
     * @memberof ReportSectionReportSectionRead
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ReportSectionReportSectionWrite
 */
export interface ReportSectionReportSectionWrite {
    /**
     *
     * @type {string}
     * @memberof ReportSectionReportSectionWrite
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ReportSelectableFieldJsonldReportSelectableFieldRead
 */
export interface ReportSelectableFieldJsonldReportSelectableFieldRead {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportSelectableFieldJsonldReportSelectableFieldRead
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportSelectableFieldJsonldReportSelectableFieldRead
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportSelectableFieldJsonldReportSelectableFieldRead
     */
    '@type'?: string;
}
/**
 *
 * @export
 * @interface ReportSelectableFieldJsonldReportSelectableFieldWrite
 */
export interface ReportSelectableFieldJsonldReportSelectableFieldWrite {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportSelectableFieldJsonldReportSelectableFieldWrite
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportSelectableFieldJsonldReportSelectableFieldWrite
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportSelectableFieldJsonldReportSelectableFieldWrite
     */
    '@type'?: string;
}
/**
 *
 * @export
 * @interface ReportTemplateJsonldReportRead
 */
export interface ReportTemplateJsonldReportRead {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportTemplateJsonldReportRead
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportTemplateJsonldReportRead
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportTemplateJsonldReportRead
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportTemplateJsonldReportRead
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportTemplateJsonldReportRead
     */
    'supportingText'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ReportTemplateJsonldReportRead
     */
    'isArchived'?: boolean;
    /**
     *
     * @type {Array<ReportSectionJsonldReportRead>}
     * @memberof ReportTemplateJsonldReportRead
     */
    'sections'?: Array<ReportSectionJsonldReportRead>;
}
/**
 *
 * @export
 * @interface ReportTemplateJsonldReportWrite
 */
export interface ReportTemplateJsonldReportWrite {
    /**
     *
     * @type {ChecklistJsonldRecordReadContext}
     * @memberof ReportTemplateJsonldReportWrite
     */
    '@context'?: ChecklistJsonldRecordReadContext;
    /**
     *
     * @type {string}
     * @memberof ReportTemplateJsonldReportWrite
     */
    '@id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportTemplateJsonldReportWrite
     */
    '@type'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportTemplateJsonldReportWrite
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportTemplateJsonldReportWrite
     */
    'supportingText'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ReportTemplateJsonldReportWrite
     */
    'isArchived'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportTemplateJsonldReportWrite
     */
    'sections'?: Array<string>;
}
/**
 *
 * @export
 * @interface ReportTemplateReportRead
 */
export interface ReportTemplateReportRead {
    /**
     *
     * @type {string}
     * @memberof ReportTemplateReportRead
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportTemplateReportRead
     */
    'supportingText'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ReportTemplateReportRead
     */
    'isArchived'?: boolean;
    /**
     *
     * @type {Array<ReportSectionReportRead>}
     * @memberof ReportTemplateReportRead
     */
    'sections'?: Array<ReportSectionReportRead>;
}
/**
 *
 * @export
 * @interface ReportTemplateReportWrite
 */
export interface ReportTemplateReportWrite {
    /**
     *
     * @type {string}
     * @memberof ReportTemplateReportWrite
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ReportTemplateReportWrite
     */
    'supportingText'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ReportTemplateReportWrite
     */
    'isArchived'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ReportTemplateReportWrite
     */
    'sections'?: Array<string>;
}

/**
 * ChecklistApi - axios parameter creator
 * @export
 */
export const ChecklistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Checklist resources.
         * @summary Retrieves the collection of Checklist resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChecklistsGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/checklists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Checklist resource.
         * @summary Removes the Checklist resource.
         * @param {string} id Checklist identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChecklistsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiChecklistsIdDelete', 'id', id)
            const localVarPath = `/checklists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Checklist resource.
         * @summary Retrieves a Checklist resource.
         * @param {string} id Checklist identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChecklistsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiChecklistsIdGet', 'id', id)
            const localVarPath = `/checklists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Checklist resource.
         * @summary Updates the Checklist resource.
         * @param {string} id Checklist identifier
         * @param {object} body The updated Checklist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChecklistsIdPatch: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiChecklistsIdPatch', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiChecklistsIdPatch', 'body', body)
            const localVarPath = `/checklists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Checklist resource.
         * @summary Replaces the Checklist resource.
         * @param {string} id Checklist identifier
         * @param {ChecklistJsonldRecordWrite} checklistJsonldRecordWrite The updated Checklist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChecklistsIdPut: async (id: string, checklistJsonldRecordWrite: ChecklistJsonldRecordWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiChecklistsIdPut', 'id', id)
            // verify required parameter 'checklistJsonldRecordWrite' is not null or undefined
            assertParamExists('apiChecklistsIdPut', 'checklistJsonldRecordWrite', checklistJsonldRecordWrite)
            const localVarPath = `/checklists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checklistJsonldRecordWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Checklist resource.
         * @summary Creates a Checklist resource.
         * @param {ChecklistJsonldRecordWrite} checklistJsonldRecordWrite The new Checklist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChecklistsPost: async (checklistJsonldRecordWrite: ChecklistJsonldRecordWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checklistJsonldRecordWrite' is not null or undefined
            assertParamExists('apiChecklistsPost', 'checklistJsonldRecordWrite', checklistJsonldRecordWrite)
            const localVarPath = `/checklists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checklistJsonldRecordWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChecklistApi - functional programming interface
 * @export
 */
export const ChecklistApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChecklistApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Checklist resources.
         * @summary Retrieves the collection of Checklist resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChecklistsGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiChecklistsGetCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChecklistsGetCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Checklist resource.
         * @summary Removes the Checklist resource.
         * @param {string} id Checklist identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChecklistsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChecklistsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Checklist resource.
         * @summary Retrieves a Checklist resource.
         * @param {string} id Checklist identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChecklistsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChecklistJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChecklistsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Checklist resource.
         * @summary Updates the Checklist resource.
         * @param {string} id Checklist identifier
         * @param {object} body The updated Checklist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChecklistsIdPatch(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChecklistJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChecklistsIdPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Checklist resource.
         * @summary Replaces the Checklist resource.
         * @param {string} id Checklist identifier
         * @param {ChecklistJsonldRecordWrite} checklistJsonldRecordWrite The updated Checklist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChecklistsIdPut(id: string, checklistJsonldRecordWrite: ChecklistJsonldRecordWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChecklistJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChecklistsIdPut(id, checklistJsonldRecordWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Checklist resource.
         * @summary Creates a Checklist resource.
         * @param {ChecklistJsonldRecordWrite} checklistJsonldRecordWrite The new Checklist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChecklistsPost(checklistJsonldRecordWrite: ChecklistJsonldRecordWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChecklistJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChecklistsPost(checklistJsonldRecordWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChecklistApi - factory interface
 * @export
 */
export const ChecklistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChecklistApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Checklist resources.
         * @summary Retrieves the collection of Checklist resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChecklistsGetCollection(page?: number, options?: any): AxiosPromise<ApiChecklistsGetCollection200Response> {
            return localVarFp.apiChecklistsGetCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Checklist resource.
         * @summary Removes the Checklist resource.
         * @param {string} id Checklist identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChecklistsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiChecklistsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Checklist resource.
         * @summary Retrieves a Checklist resource.
         * @param {string} id Checklist identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChecklistsIdGet(id: string, options?: any): AxiosPromise<ChecklistJsonldRecordRead> {
            return localVarFp.apiChecklistsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Checklist resource.
         * @summary Updates the Checklist resource.
         * @param {string} id Checklist identifier
         * @param {object} body The updated Checklist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChecklistsIdPatch(id: string, body: object, options?: any): AxiosPromise<ChecklistJsonldRecordRead> {
            return localVarFp.apiChecklistsIdPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Checklist resource.
         * @summary Replaces the Checklist resource.
         * @param {string} id Checklist identifier
         * @param {ChecklistJsonldRecordWrite} checklistJsonldRecordWrite The updated Checklist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChecklistsIdPut(id: string, checklistJsonldRecordWrite: ChecklistJsonldRecordWrite, options?: any): AxiosPromise<ChecklistJsonldRecordRead> {
            return localVarFp.apiChecklistsIdPut(id, checklistJsonldRecordWrite, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Checklist resource.
         * @summary Creates a Checklist resource.
         * @param {ChecklistJsonldRecordWrite} checklistJsonldRecordWrite The new Checklist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChecklistsPost(checklistJsonldRecordWrite: ChecklistJsonldRecordWrite, options?: any): AxiosPromise<ChecklistJsonldRecordRead> {
            return localVarFp.apiChecklistsPost(checklistJsonldRecordWrite, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChecklistApi - object-oriented interface
 * @export
 * @class ChecklistApi
 * @extends {BaseAPI}
 */
export class ChecklistApi extends BaseAPI {
    /**
     * Retrieves the collection of Checklist resources.
     * @summary Retrieves the collection of Checklist resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApi
     */
    public apiChecklistsGetCollection(page?: number, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).apiChecklistsGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Checklist resource.
     * @summary Removes the Checklist resource.
     * @param {string} id Checklist identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApi
     */
    public apiChecklistsIdDelete(id: string, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).apiChecklistsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Checklist resource.
     * @summary Retrieves a Checklist resource.
     * @param {string} id Checklist identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApi
     */
    public apiChecklistsIdGet(id: string, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).apiChecklistsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Checklist resource.
     * @summary Updates the Checklist resource.
     * @param {string} id Checklist identifier
     * @param {object} body The updated Checklist resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApi
     */
    public apiChecklistsIdPatch(id: string, body: object, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).apiChecklistsIdPatch(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Checklist resource.
     * @summary Replaces the Checklist resource.
     * @param {string} id Checklist identifier
     * @param {ChecklistJsonldRecordWrite} checklistJsonldRecordWrite The updated Checklist resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApi
     */
    public apiChecklistsIdPut(id: string, checklistJsonldRecordWrite: ChecklistJsonldRecordWrite, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).apiChecklistsIdPut(id, checklistJsonldRecordWrite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Checklist resource.
     * @summary Creates a Checklist resource.
     * @param {ChecklistJsonldRecordWrite} checklistJsonldRecordWrite The new Checklist resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApi
     */
    public apiChecklistsPost(checklistJsonldRecordWrite: ChecklistJsonldRecordWrite, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).apiChecklistsPost(checklistJsonldRecordWrite, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FileReportFileFieldApi - axios parameter creator
 * @export
 */
export const FileReportFileFieldApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of FileReportFileField resources.
         * @summary Retrieves the collection of FileReportFileField resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileReportFileFieldsGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/file_report_file_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the FileReportFileField resource.
         * @summary Removes the FileReportFileField resource.
         * @param {string} id FileReportFileField identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileReportFileFieldsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFileReportFileFieldsIdDelete', 'id', id)
            const localVarPath = `/file_report_file_fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a FileReportFileField resource.
         * @summary Retrieves a FileReportFileField resource.
         * @param {string} id FileReportFileField identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileReportFileFieldsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFileReportFileFieldsIdGet', 'id', id)
            const localVarPath = `/file_report_file_fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the FileReportFileField resource.
         * @summary Updates the FileReportFileField resource.
         * @param {string} id FileReportFileField identifier
         * @param {FileReportFileField} fileReportFileField The updated FileReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileReportFileFieldsIdPatch: async (id: string, fileReportFileField: FileReportFileField, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFileReportFileFieldsIdPatch', 'id', id)
            // verify required parameter 'fileReportFileField' is not null or undefined
            assertParamExists('apiFileReportFileFieldsIdPatch', 'fileReportFileField', fileReportFileField)
            const localVarPath = `/file_report_file_fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fileReportFileField, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the FileReportFileField resource.
         * @summary Replaces the FileReportFileField resource.
         * @param {string} id FileReportFileField identifier
         * @param {FileReportFileFieldJsonld} fileReportFileFieldJsonld The updated FileReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileReportFileFieldsIdPut: async (id: string, fileReportFileFieldJsonld: FileReportFileFieldJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFileReportFileFieldsIdPut', 'id', id)
            // verify required parameter 'fileReportFileFieldJsonld' is not null or undefined
            assertParamExists('apiFileReportFileFieldsIdPut', 'fileReportFileFieldJsonld', fileReportFileFieldJsonld)
            const localVarPath = `/file_report_file_fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fileReportFileFieldJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a FileReportFileField resource.
         * @summary Creates a FileReportFileField resource.
         * @param {FileReportFileFieldJsonld} fileReportFileFieldJsonld The new FileReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileReportFileFieldsPost: async (fileReportFileFieldJsonld: FileReportFileFieldJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileReportFileFieldJsonld' is not null or undefined
            assertParamExists('apiFileReportFileFieldsPost', 'fileReportFileFieldJsonld', fileReportFileFieldJsonld)
            const localVarPath = `/file_report_file_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fileReportFileFieldJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileReportFileFieldApi - functional programming interface
 * @export
 */
export const FileReportFileFieldApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileReportFileFieldApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of FileReportFileField resources.
         * @summary Retrieves the collection of FileReportFileField resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileReportFileFieldsGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiFileReportFileFieldsGetCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileReportFileFieldsGetCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the FileReportFileField resource.
         * @summary Removes the FileReportFileField resource.
         * @param {string} id FileReportFileField identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileReportFileFieldsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileReportFileFieldsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a FileReportFileField resource.
         * @summary Retrieves a FileReportFileField resource.
         * @param {string} id FileReportFileField identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileReportFileFieldsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileReportFileFieldJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileReportFileFieldsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the FileReportFileField resource.
         * @summary Updates the FileReportFileField resource.
         * @param {string} id FileReportFileField identifier
         * @param {FileReportFileField} fileReportFileField The updated FileReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileReportFileFieldsIdPatch(id: string, fileReportFileField: FileReportFileField, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileReportFileFieldJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileReportFileFieldsIdPatch(id, fileReportFileField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the FileReportFileField resource.
         * @summary Replaces the FileReportFileField resource.
         * @param {string} id FileReportFileField identifier
         * @param {FileReportFileFieldJsonld} fileReportFileFieldJsonld The updated FileReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileReportFileFieldsIdPut(id: string, fileReportFileFieldJsonld: FileReportFileFieldJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileReportFileFieldJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileReportFileFieldsIdPut(id, fileReportFileFieldJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a FileReportFileField resource.
         * @summary Creates a FileReportFileField resource.
         * @param {FileReportFileFieldJsonld} fileReportFileFieldJsonld The new FileReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileReportFileFieldsPost(fileReportFileFieldJsonld: FileReportFileFieldJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileReportFileFieldJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileReportFileFieldsPost(fileReportFileFieldJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileReportFileFieldApi - factory interface
 * @export
 */
export const FileReportFileFieldApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileReportFileFieldApiFp(configuration)
    return {
        /**
         * Retrieves the collection of FileReportFileField resources.
         * @summary Retrieves the collection of FileReportFileField resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileReportFileFieldsGetCollection(page?: number, options?: any): AxiosPromise<ApiFileReportFileFieldsGetCollection200Response> {
            return localVarFp.apiFileReportFileFieldsGetCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the FileReportFileField resource.
         * @summary Removes the FileReportFileField resource.
         * @param {string} id FileReportFileField identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileReportFileFieldsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFileReportFileFieldsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a FileReportFileField resource.
         * @summary Retrieves a FileReportFileField resource.
         * @param {string} id FileReportFileField identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileReportFileFieldsIdGet(id: string, options?: any): AxiosPromise<FileReportFileFieldJsonld> {
            return localVarFp.apiFileReportFileFieldsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the FileReportFileField resource.
         * @summary Updates the FileReportFileField resource.
         * @param {string} id FileReportFileField identifier
         * @param {FileReportFileField} fileReportFileField The updated FileReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileReportFileFieldsIdPatch(id: string, fileReportFileField: FileReportFileField, options?: any): AxiosPromise<FileReportFileFieldJsonld> {
            return localVarFp.apiFileReportFileFieldsIdPatch(id, fileReportFileField, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the FileReportFileField resource.
         * @summary Replaces the FileReportFileField resource.
         * @param {string} id FileReportFileField identifier
         * @param {FileReportFileFieldJsonld} fileReportFileFieldJsonld The updated FileReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileReportFileFieldsIdPut(id: string, fileReportFileFieldJsonld: FileReportFileFieldJsonld, options?: any): AxiosPromise<FileReportFileFieldJsonld> {
            return localVarFp.apiFileReportFileFieldsIdPut(id, fileReportFileFieldJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a FileReportFileField resource.
         * @summary Creates a FileReportFileField resource.
         * @param {FileReportFileFieldJsonld} fileReportFileFieldJsonld The new FileReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileReportFileFieldsPost(fileReportFileFieldJsonld: FileReportFileFieldJsonld, options?: any): AxiosPromise<FileReportFileFieldJsonld> {
            return localVarFp.apiFileReportFileFieldsPost(fileReportFileFieldJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileReportFileFieldApi - object-oriented interface
 * @export
 * @class FileReportFileFieldApi
 * @extends {BaseAPI}
 */
export class FileReportFileFieldApi extends BaseAPI {
    /**
     * Retrieves the collection of FileReportFileField resources.
     * @summary Retrieves the collection of FileReportFileField resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileReportFileFieldApi
     */
    public apiFileReportFileFieldsGetCollection(page?: number, options?: AxiosRequestConfig) {
        return FileReportFileFieldApiFp(this.configuration).apiFileReportFileFieldsGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the FileReportFileField resource.
     * @summary Removes the FileReportFileField resource.
     * @param {string} id FileReportFileField identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileReportFileFieldApi
     */
    public apiFileReportFileFieldsIdDelete(id: string, options?: AxiosRequestConfig) {
        return FileReportFileFieldApiFp(this.configuration).apiFileReportFileFieldsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a FileReportFileField resource.
     * @summary Retrieves a FileReportFileField resource.
     * @param {string} id FileReportFileField identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileReportFileFieldApi
     */
    public apiFileReportFileFieldsIdGet(id: string, options?: AxiosRequestConfig) {
        return FileReportFileFieldApiFp(this.configuration).apiFileReportFileFieldsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the FileReportFileField resource.
     * @summary Updates the FileReportFileField resource.
     * @param {string} id FileReportFileField identifier
     * @param {FileReportFileField} fileReportFileField The updated FileReportFileField resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileReportFileFieldApi
     */
    public apiFileReportFileFieldsIdPatch(id: string, fileReportFileField: FileReportFileField, options?: AxiosRequestConfig) {
        return FileReportFileFieldApiFp(this.configuration).apiFileReportFileFieldsIdPatch(id, fileReportFileField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the FileReportFileField resource.
     * @summary Replaces the FileReportFileField resource.
     * @param {string} id FileReportFileField identifier
     * @param {FileReportFileFieldJsonld} fileReportFileFieldJsonld The updated FileReportFileField resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileReportFileFieldApi
     */
    public apiFileReportFileFieldsIdPut(id: string, fileReportFileFieldJsonld: FileReportFileFieldJsonld, options?: AxiosRequestConfig) {
        return FileReportFileFieldApiFp(this.configuration).apiFileReportFileFieldsIdPut(id, fileReportFileFieldJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a FileReportFileField resource.
     * @summary Creates a FileReportFileField resource.
     * @param {FileReportFileFieldJsonld} fileReportFileFieldJsonld The new FileReportFileField resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileReportFileFieldApi
     */
    public apiFileReportFileFieldsPost(fileReportFileFieldJsonld: FileReportFileFieldJsonld, options?: AxiosRequestConfig) {
        return FileReportFileFieldApiFp(this.configuration).apiFileReportFileFieldsPost(fileReportFileFieldJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IssueApi - axios parameter creator
 * @export
 */
export const IssueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Issue resources.
         * @summary Retrieves the collection of Issue resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIssuesGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/issues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Issue resource.
         * @summary Removes the Issue resource.
         * @param {string} id Issue identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIssuesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIssuesIdDelete', 'id', id)
            const localVarPath = `/issues/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Issue resource.
         * @summary Retrieves a Issue resource.
         * @param {string} id Issue identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIssuesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIssuesIdGet', 'id', id)
            const localVarPath = `/issues/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Issue resource.
         * @summary Updates the Issue resource.
         * @param {string} id Issue identifier
         * @param {object} body The updated Issue resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIssuesIdPatch: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIssuesIdPatch', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiIssuesIdPatch', 'body', body)
            const localVarPath = `/issues/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Issue resource.
         * @summary Replaces the Issue resource.
         * @param {string} id Issue identifier
         * @param {IssueJsonldRecordWrite} issueJsonldRecordWrite The updated Issue resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIssuesIdPut: async (id: string, issueJsonldRecordWrite: IssueJsonldRecordWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIssuesIdPut', 'id', id)
            // verify required parameter 'issueJsonldRecordWrite' is not null or undefined
            assertParamExists('apiIssuesIdPut', 'issueJsonldRecordWrite', issueJsonldRecordWrite)
            const localVarPath = `/issues/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issueJsonldRecordWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Issue resource.
         * @summary Creates a Issue resource.
         * @param {IssueJsonldRecordWrite} issueJsonldRecordWrite The new Issue resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIssuesPost: async (issueJsonldRecordWrite: IssueJsonldRecordWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueJsonldRecordWrite' is not null or undefined
            assertParamExists('apiIssuesPost', 'issueJsonldRecordWrite', issueJsonldRecordWrite)
            const localVarPath = `/issues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issueJsonldRecordWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IssueApi - functional programming interface
 * @export
 */
export const IssueApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IssueApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Issue resources.
         * @summary Retrieves the collection of Issue resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIssuesGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiIssuesGetCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIssuesGetCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Issue resource.
         * @summary Removes the Issue resource.
         * @param {string} id Issue identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIssuesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIssuesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Issue resource.
         * @summary Retrieves a Issue resource.
         * @param {string} id Issue identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIssuesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssueJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIssuesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Issue resource.
         * @summary Updates the Issue resource.
         * @param {string} id Issue identifier
         * @param {object} body The updated Issue resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIssuesIdPatch(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssueJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIssuesIdPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Issue resource.
         * @summary Replaces the Issue resource.
         * @param {string} id Issue identifier
         * @param {IssueJsonldRecordWrite} issueJsonldRecordWrite The updated Issue resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIssuesIdPut(id: string, issueJsonldRecordWrite: IssueJsonldRecordWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssueJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIssuesIdPut(id, issueJsonldRecordWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Issue resource.
         * @summary Creates a Issue resource.
         * @param {IssueJsonldRecordWrite} issueJsonldRecordWrite The new Issue resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIssuesPost(issueJsonldRecordWrite: IssueJsonldRecordWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssueJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIssuesPost(issueJsonldRecordWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IssueApi - factory interface
 * @export
 */
export const IssueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IssueApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Issue resources.
         * @summary Retrieves the collection of Issue resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIssuesGetCollection(page?: number, options?: any): AxiosPromise<ApiIssuesGetCollection200Response> {
            return localVarFp.apiIssuesGetCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Issue resource.
         * @summary Removes the Issue resource.
         * @param {string} id Issue identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIssuesIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiIssuesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Issue resource.
         * @summary Retrieves a Issue resource.
         * @param {string} id Issue identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIssuesIdGet(id: string, options?: any): AxiosPromise<IssueJsonldRecordRead> {
            return localVarFp.apiIssuesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Issue resource.
         * @summary Updates the Issue resource.
         * @param {string} id Issue identifier
         * @param {object} body The updated Issue resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIssuesIdPatch(id: string, body: object, options?: any): AxiosPromise<IssueJsonldRecordRead> {
            return localVarFp.apiIssuesIdPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Issue resource.
         * @summary Replaces the Issue resource.
         * @param {string} id Issue identifier
         * @param {IssueJsonldRecordWrite} issueJsonldRecordWrite The updated Issue resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIssuesIdPut(id: string, issueJsonldRecordWrite: IssueJsonldRecordWrite, options?: any): AxiosPromise<IssueJsonldRecordRead> {
            return localVarFp.apiIssuesIdPut(id, issueJsonldRecordWrite, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Issue resource.
         * @summary Creates a Issue resource.
         * @param {IssueJsonldRecordWrite} issueJsonldRecordWrite The new Issue resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIssuesPost(issueJsonldRecordWrite: IssueJsonldRecordWrite, options?: any): AxiosPromise<IssueJsonldRecordRead> {
            return localVarFp.apiIssuesPost(issueJsonldRecordWrite, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IssueApi - object-oriented interface
 * @export
 * @class IssueApi
 * @extends {BaseAPI}
 */
export class IssueApi extends BaseAPI {
    /**
     * Retrieves the collection of Issue resources.
     * @summary Retrieves the collection of Issue resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public apiIssuesGetCollection(page?: number, options?: AxiosRequestConfig) {
        return IssueApiFp(this.configuration).apiIssuesGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Issue resource.
     * @summary Removes the Issue resource.
     * @param {string} id Issue identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public apiIssuesIdDelete(id: string, options?: AxiosRequestConfig) {
        return IssueApiFp(this.configuration).apiIssuesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Issue resource.
     * @summary Retrieves a Issue resource.
     * @param {string} id Issue identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public apiIssuesIdGet(id: string, options?: AxiosRequestConfig) {
        return IssueApiFp(this.configuration).apiIssuesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Issue resource.
     * @summary Updates the Issue resource.
     * @param {string} id Issue identifier
     * @param {object} body The updated Issue resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public apiIssuesIdPatch(id: string, body: object, options?: AxiosRequestConfig) {
        return IssueApiFp(this.configuration).apiIssuesIdPatch(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Issue resource.
     * @summary Replaces the Issue resource.
     * @param {string} id Issue identifier
     * @param {IssueJsonldRecordWrite} issueJsonldRecordWrite The updated Issue resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public apiIssuesIdPut(id: string, issueJsonldRecordWrite: IssueJsonldRecordWrite, options?: AxiosRequestConfig) {
        return IssueApiFp(this.configuration).apiIssuesIdPut(id, issueJsonldRecordWrite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Issue resource.
     * @summary Creates a Issue resource.
     * @param {IssueJsonldRecordWrite} issueJsonldRecordWrite The new Issue resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public apiIssuesPost(issueJsonldRecordWrite: IssueJsonldRecordWrite, options?: AxiosRequestConfig) {
        return IssueApiFp(this.configuration).apiIssuesPost(issueJsonldRecordWrite, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NoteApi - axios parameter creator
 * @export
 */
export const NoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Note resources.
         * @summary Retrieves the collection of Note resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotesGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Note resource.
         * @summary Removes the Note resource.
         * @param {string} id Note identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiNotesIdDelete', 'id', id)
            const localVarPath = `/notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Note resource.
         * @summary Retrieves a Note resource.
         * @param {string} id Note identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiNotesIdGet', 'id', id)
            const localVarPath = `/notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Note resource.
         * @summary Updates the Note resource.
         * @param {string} id Note identifier
         * @param {object} body The updated Note resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotesIdPatch: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiNotesIdPatch', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiNotesIdPatch', 'body', body)
            const localVarPath = `/notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Note resource.
         * @summary Replaces the Note resource.
         * @param {string} id Note identifier
         * @param {NoteJsonldRecordWrite} noteJsonldRecordWrite The updated Note resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotesIdPut: async (id: string, noteJsonldRecordWrite: NoteJsonldRecordWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiNotesIdPut', 'id', id)
            // verify required parameter 'noteJsonldRecordWrite' is not null or undefined
            assertParamExists('apiNotesIdPut', 'noteJsonldRecordWrite', noteJsonldRecordWrite)
            const localVarPath = `/notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(noteJsonldRecordWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Note resource.
         * @summary Creates a Note resource.
         * @param {NoteJsonldRecordWrite} noteJsonldRecordWrite The new Note resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotesPost: async (noteJsonldRecordWrite: NoteJsonldRecordWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteJsonldRecordWrite' is not null or undefined
            assertParamExists('apiNotesPost', 'noteJsonldRecordWrite', noteJsonldRecordWrite)
            const localVarPath = `/notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(noteJsonldRecordWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NoteApi - functional programming interface
 * @export
 */
export const NoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NoteApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Note resources.
         * @summary Retrieves the collection of Note resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotesGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiNotesGetCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNotesGetCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Note resource.
         * @summary Removes the Note resource.
         * @param {string} id Note identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNotesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Note resource.
         * @summary Retrieves a Note resource.
         * @param {string} id Note identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NoteJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNotesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Note resource.
         * @summary Updates the Note resource.
         * @param {string} id Note identifier
         * @param {object} body The updated Note resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotesIdPatch(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NoteJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNotesIdPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Note resource.
         * @summary Replaces the Note resource.
         * @param {string} id Note identifier
         * @param {NoteJsonldRecordWrite} noteJsonldRecordWrite The updated Note resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotesIdPut(id: string, noteJsonldRecordWrite: NoteJsonldRecordWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NoteJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNotesIdPut(id, noteJsonldRecordWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Note resource.
         * @summary Creates a Note resource.
         * @param {NoteJsonldRecordWrite} noteJsonldRecordWrite The new Note resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotesPost(noteJsonldRecordWrite: NoteJsonldRecordWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NoteJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNotesPost(noteJsonldRecordWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NoteApi - factory interface
 * @export
 */
export const NoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NoteApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Note resources.
         * @summary Retrieves the collection of Note resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotesGetCollection(page?: number, options?: any): AxiosPromise<ApiNotesGetCollection200Response> {
            return localVarFp.apiNotesGetCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Note resource.
         * @summary Removes the Note resource.
         * @param {string} id Note identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotesIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiNotesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Note resource.
         * @summary Retrieves a Note resource.
         * @param {string} id Note identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotesIdGet(id: string, options?: any): AxiosPromise<NoteJsonldRecordRead> {
            return localVarFp.apiNotesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Note resource.
         * @summary Updates the Note resource.
         * @param {string} id Note identifier
         * @param {object} body The updated Note resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotesIdPatch(id: string, body: object, options?: any): AxiosPromise<NoteJsonldRecordRead> {
            return localVarFp.apiNotesIdPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Note resource.
         * @summary Replaces the Note resource.
         * @param {string} id Note identifier
         * @param {NoteJsonldRecordWrite} noteJsonldRecordWrite The updated Note resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotesIdPut(id: string, noteJsonldRecordWrite: NoteJsonldRecordWrite, options?: any): AxiosPromise<NoteJsonldRecordRead> {
            return localVarFp.apiNotesIdPut(id, noteJsonldRecordWrite, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Note resource.
         * @summary Creates a Note resource.
         * @param {NoteJsonldRecordWrite} noteJsonldRecordWrite The new Note resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotesPost(noteJsonldRecordWrite: NoteJsonldRecordWrite, options?: any): AxiosPromise<NoteJsonldRecordRead> {
            return localVarFp.apiNotesPost(noteJsonldRecordWrite, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NoteApi - object-oriented interface
 * @export
 * @class NoteApi
 * @extends {BaseAPI}
 */
export class NoteApi extends BaseAPI {
    /**
     * Retrieves the collection of Note resources.
     * @summary Retrieves the collection of Note resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public apiNotesGetCollection(page?: number, options?: AxiosRequestConfig) {
        return NoteApiFp(this.configuration).apiNotesGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Note resource.
     * @summary Removes the Note resource.
     * @param {string} id Note identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public apiNotesIdDelete(id: string, options?: AxiosRequestConfig) {
        return NoteApiFp(this.configuration).apiNotesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Note resource.
     * @summary Retrieves a Note resource.
     * @param {string} id Note identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public apiNotesIdGet(id: string, options?: AxiosRequestConfig) {
        return NoteApiFp(this.configuration).apiNotesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Note resource.
     * @summary Updates the Note resource.
     * @param {string} id Note identifier
     * @param {object} body The updated Note resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public apiNotesIdPatch(id: string, body: object, options?: AxiosRequestConfig) {
        return NoteApiFp(this.configuration).apiNotesIdPatch(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Note resource.
     * @summary Replaces the Note resource.
     * @param {string} id Note identifier
     * @param {NoteJsonldRecordWrite} noteJsonldRecordWrite The updated Note resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public apiNotesIdPut(id: string, noteJsonldRecordWrite: NoteJsonldRecordWrite, options?: AxiosRequestConfig) {
        return NoteApiFp(this.configuration).apiNotesIdPut(id, noteJsonldRecordWrite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Note resource.
     * @summary Creates a Note resource.
     * @param {NoteJsonldRecordWrite} noteJsonldRecordWrite The new Note resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApi
     */
    public apiNotesPost(noteJsonldRecordWrite: NoteJsonldRecordWrite, options?: AxiosRequestConfig) {
        return NoteApiFp(this.configuration).apiNotesPost(noteJsonldRecordWrite, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecordApi - axios parameter creator
 * @export
 */
export const RecordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Record resources.
         * @summary Retrieves the collection of Record resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Record resource.
         * @summary Removes the Record resource.
         * @param {string} id Record identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRecordsIdDelete', 'id', id)
            const localVarPath = `/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Record resource.
         * @summary Retrieves a Record resource.
         * @param {string} id Record identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRecordsIdGet', 'id', id)
            const localVarPath = `/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Record resource.
         * @summary Updates the Record resource.
         * @param {string} id Record identifier
         * @param {object} body The updated Record resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsIdPatch: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRecordsIdPatch', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiRecordsIdPatch', 'body', body)
            const localVarPath = `/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Record resource.
         * @summary Replaces the Record resource.
         * @param {string} id Record identifier
         * @param {RecordJsonldRecordWrite} recordJsonldRecordWrite The updated Record resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsIdPut: async (id: string, recordJsonldRecordWrite: RecordJsonldRecordWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRecordsIdPut', 'id', id)
            // verify required parameter 'recordJsonldRecordWrite' is not null or undefined
            assertParamExists('apiRecordsIdPut', 'recordJsonldRecordWrite', recordJsonldRecordWrite)
            const localVarPath = `/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recordJsonldRecordWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Record resource.
         * @summary Creates a Record resource.
         * @param {RecordJsonldRecordWrite} recordJsonldRecordWrite The new Record resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsPost: async (recordJsonldRecordWrite: RecordJsonldRecordWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordJsonldRecordWrite' is not null or undefined
            assertParamExists('apiRecordsPost', 'recordJsonldRecordWrite', recordJsonldRecordWrite)
            const localVarPath = `/records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recordJsonldRecordWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecordApi - functional programming interface
 * @export
 */
export const RecordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecordApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Record resources.
         * @summary Retrieves the collection of Record resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRecordsGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRecordsGetCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRecordsGetCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Record resource.
         * @summary Removes the Record resource.
         * @param {string} id Record identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRecordsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRecordsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Record resource.
         * @summary Retrieves a Record resource.
         * @param {string} id Record identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRecordsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRecordsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Record resource.
         * @summary Updates the Record resource.
         * @param {string} id Record identifier
         * @param {object} body The updated Record resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRecordsIdPatch(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRecordsIdPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Record resource.
         * @summary Replaces the Record resource.
         * @param {string} id Record identifier
         * @param {RecordJsonldRecordWrite} recordJsonldRecordWrite The updated Record resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRecordsIdPut(id: string, recordJsonldRecordWrite: RecordJsonldRecordWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRecordsIdPut(id, recordJsonldRecordWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Record resource.
         * @summary Creates a Record resource.
         * @param {RecordJsonldRecordWrite} recordJsonldRecordWrite The new Record resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRecordsPost(recordJsonldRecordWrite: RecordJsonldRecordWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordJsonldRecordRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRecordsPost(recordJsonldRecordWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecordApi - factory interface
 * @export
 */
export const RecordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecordApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Record resources.
         * @summary Retrieves the collection of Record resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsGetCollection(page?: number, options?: any): AxiosPromise<ApiRecordsGetCollection200Response> {
            return localVarFp.apiRecordsGetCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Record resource.
         * @summary Removes the Record resource.
         * @param {string} id Record identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiRecordsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Record resource.
         * @summary Retrieves a Record resource.
         * @param {string} id Record identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsIdGet(id: string, options?: any): AxiosPromise<RecordJsonldRecordRead> {
            return localVarFp.apiRecordsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Record resource.
         * @summary Updates the Record resource.
         * @param {string} id Record identifier
         * @param {object} body The updated Record resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsIdPatch(id: string, body: object, options?: any): AxiosPromise<RecordJsonldRecordRead> {
            return localVarFp.apiRecordsIdPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Record resource.
         * @summary Replaces the Record resource.
         * @param {string} id Record identifier
         * @param {RecordJsonldRecordWrite} recordJsonldRecordWrite The updated Record resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsIdPut(id: string, recordJsonldRecordWrite: RecordJsonldRecordWrite, options?: any): AxiosPromise<RecordJsonldRecordRead> {
            return localVarFp.apiRecordsIdPut(id, recordJsonldRecordWrite, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Record resource.
         * @summary Creates a Record resource.
         * @param {RecordJsonldRecordWrite} recordJsonldRecordWrite The new Record resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsPost(recordJsonldRecordWrite: RecordJsonldRecordWrite, options?: any): AxiosPromise<RecordJsonldRecordRead> {
            return localVarFp.apiRecordsPost(recordJsonldRecordWrite, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecordApi - object-oriented interface
 * @export
 * @class RecordApi
 * @extends {BaseAPI}
 */
export class RecordApi extends BaseAPI {
    /**
     * Retrieves the collection of Record resources.
     * @summary Retrieves the collection of Record resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordApi
     */
    public apiRecordsGetCollection(page?: number, options?: AxiosRequestConfig) {
        return RecordApiFp(this.configuration).apiRecordsGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Record resource.
     * @summary Removes the Record resource.
     * @param {string} id Record identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordApi
     */
    public apiRecordsIdDelete(id: string, options?: AxiosRequestConfig) {
        return RecordApiFp(this.configuration).apiRecordsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Record resource.
     * @summary Retrieves a Record resource.
     * @param {string} id Record identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordApi
     */
    public apiRecordsIdGet(id: string, options?: AxiosRequestConfig) {
        return RecordApiFp(this.configuration).apiRecordsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Record resource.
     * @summary Updates the Record resource.
     * @param {string} id Record identifier
     * @param {object} body The updated Record resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordApi
     */
    public apiRecordsIdPatch(id: string, body: object, options?: AxiosRequestConfig) {
        return RecordApiFp(this.configuration).apiRecordsIdPatch(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Record resource.
     * @summary Replaces the Record resource.
     * @param {string} id Record identifier
     * @param {RecordJsonldRecordWrite} recordJsonldRecordWrite The updated Record resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordApi
     */
    public apiRecordsIdPut(id: string, recordJsonldRecordWrite: RecordJsonldRecordWrite, options?: AxiosRequestConfig) {
        return RecordApiFp(this.configuration).apiRecordsIdPut(id, recordJsonldRecordWrite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Record resource.
     * @summary Creates a Record resource.
     * @param {RecordJsonldRecordWrite} recordJsonldRecordWrite The new Record resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordApi
     */
    public apiRecordsPost(recordJsonldRecordWrite: RecordJsonldRecordWrite, options?: AxiosRequestConfig) {
        return RecordApiFp(this.configuration).apiRecordsPost(recordJsonldRecordWrite, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Report resources.
         * @summary Retrieves the collection of Report resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Report resource.
         * @summary Removes the Report resource.
         * @param {string} id Report identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportsIdDelete', 'id', id)
            const localVarPath = `/reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Report resource.
         * @summary Retrieves a Report resource.
         * @param {string} id Report identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportsIdGet', 'id', id)
            const localVarPath = `/reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Report resource.
         * @summary Updates the Report resource.
         * @param {string} id Report identifier
         * @param {ReportReportWrite} reportReportWrite The updated Report resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsIdPatch: async (id: string, reportReportWrite: ReportReportWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportsIdPatch', 'id', id)
            // verify required parameter 'reportReportWrite' is not null or undefined
            assertParamExists('apiReportsIdPatch', 'reportReportWrite', reportReportWrite)
            const localVarPath = `/reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportReportWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Report resource.
         * @summary Replaces the Report resource.
         * @param {string} id Report identifier
         * @param {ReportJsonldReportWrite} reportJsonldReportWrite The updated Report resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsIdPut: async (id: string, reportJsonldReportWrite: ReportJsonldReportWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportsIdPut', 'id', id)
            // verify required parameter 'reportJsonldReportWrite' is not null or undefined
            assertParamExists('apiReportsIdPut', 'reportJsonldReportWrite', reportJsonldReportWrite)
            const localVarPath = `/reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportJsonldReportWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Report resource.
         * @summary Creates a Report resource.
         * @param {ReportJsonldReportWrite} reportJsonldReportWrite The new Report resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsPost: async (reportJsonldReportWrite: ReportJsonldReportWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportJsonldReportWrite' is not null or undefined
            assertParamExists('apiReportsPost', 'reportJsonldReportWrite', reportJsonldReportWrite)
            const localVarPath = `/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportJsonldReportWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Report resources.
         * @summary Retrieves the collection of Report resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportsGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiReportsGetCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportsGetCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Report resource.
         * @summary Removes the Report resource.
         * @param {string} id Report identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Report resource.
         * @summary Retrieves a Report resource.
         * @param {string} id Report identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportJsonldReportRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Report resource.
         * @summary Updates the Report resource.
         * @param {string} id Report identifier
         * @param {ReportReportWrite} reportReportWrite The updated Report resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportsIdPatch(id: string, reportReportWrite: ReportReportWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportJsonldReportRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportsIdPatch(id, reportReportWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Report resource.
         * @summary Replaces the Report resource.
         * @param {string} id Report identifier
         * @param {ReportJsonldReportWrite} reportJsonldReportWrite The updated Report resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportsIdPut(id: string, reportJsonldReportWrite: ReportJsonldReportWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportJsonldReportRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportsIdPut(id, reportJsonldReportWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Report resource.
         * @summary Creates a Report resource.
         * @param {ReportJsonldReportWrite} reportJsonldReportWrite The new Report resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportsPost(reportJsonldReportWrite: ReportJsonldReportWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportJsonldReportRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportsPost(reportJsonldReportWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Report resources.
         * @summary Retrieves the collection of Report resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsGetCollection(page?: number, options?: any): AxiosPromise<ApiReportsGetCollection200Response> {
            return localVarFp.apiReportsGetCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Report resource.
         * @summary Removes the Report resource.
         * @param {string} id Report identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiReportsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Report resource.
         * @summary Retrieves a Report resource.
         * @param {string} id Report identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsIdGet(id: string, options?: any): AxiosPromise<ReportJsonldReportRead> {
            return localVarFp.apiReportsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Report resource.
         * @summary Updates the Report resource.
         * @param {string} id Report identifier
         * @param {ReportReportWrite} reportReportWrite The updated Report resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsIdPatch(id: string, reportReportWrite: ReportReportWrite, options?: any): AxiosPromise<ReportJsonldReportRead> {
            return localVarFp.apiReportsIdPatch(id, reportReportWrite, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Report resource.
         * @summary Replaces the Report resource.
         * @param {string} id Report identifier
         * @param {ReportJsonldReportWrite} reportJsonldReportWrite The updated Report resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsIdPut(id: string, reportJsonldReportWrite: ReportJsonldReportWrite, options?: any): AxiosPromise<ReportJsonldReportRead> {
            return localVarFp.apiReportsIdPut(id, reportJsonldReportWrite, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Report resource.
         * @summary Creates a Report resource.
         * @param {ReportJsonldReportWrite} reportJsonldReportWrite The new Report resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportsPost(reportJsonldReportWrite: ReportJsonldReportWrite, options?: any): AxiosPromise<ReportJsonldReportRead> {
            return localVarFp.apiReportsPost(reportJsonldReportWrite, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI {
    /**
     * Retrieves the collection of Report resources.
     * @summary Retrieves the collection of Report resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public apiReportsGetCollection(page?: number, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).apiReportsGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Report resource.
     * @summary Removes the Report resource.
     * @param {string} id Report identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public apiReportsIdDelete(id: string, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).apiReportsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Report resource.
     * @summary Retrieves a Report resource.
     * @param {string} id Report identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public apiReportsIdGet(id: string, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).apiReportsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Report resource.
     * @summary Updates the Report resource.
     * @param {string} id Report identifier
     * @param {ReportReportWrite} reportReportWrite The updated Report resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public apiReportsIdPatch(id: string, reportReportWrite: ReportReportWrite, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).apiReportsIdPatch(id, reportReportWrite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Report resource.
     * @summary Replaces the Report resource.
     * @param {string} id Report identifier
     * @param {ReportJsonldReportWrite} reportJsonldReportWrite The updated Report resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public apiReportsIdPut(id: string, reportJsonldReportWrite: ReportJsonldReportWrite, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).apiReportsIdPut(id, reportJsonldReportWrite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Report resource.
     * @summary Creates a Report resource.
     * @param {ReportJsonldReportWrite} reportJsonldReportWrite The new Report resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public apiReportsPost(reportJsonldReportWrite: ReportJsonldReportWrite, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).apiReportsPost(reportJsonldReportWrite, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportBasicFieldApi - axios parameter creator
 * @export
 */
export const ReportBasicFieldApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Replaces the ReportBasicField resource.
         * @summary Replaces the ReportBasicField resource.
         * @param {string} id ReportBasicField identifier
         * @param {ReportBasicFieldJsonldReportBasicFieldWrite} reportBasicFieldJsonldReportBasicFieldWrite The updated ReportBasicField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportBasicFieldsIdPut: async (id: string, reportBasicFieldJsonldReportBasicFieldWrite: ReportBasicFieldJsonldReportBasicFieldWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportBasicFieldsIdPut', 'id', id)
            // verify required parameter 'reportBasicFieldJsonldReportBasicFieldWrite' is not null or undefined
            assertParamExists('apiReportBasicFieldsIdPut', 'reportBasicFieldJsonldReportBasicFieldWrite', reportBasicFieldJsonldReportBasicFieldWrite)
            const localVarPath = `/report_basic_fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportBasicFieldJsonldReportBasicFieldWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ReportBasicField resource.
         * @summary Creates a ReportBasicField resource.
         * @param {ReportBasicFieldJsonldReportBasicFieldWrite} reportBasicFieldJsonldReportBasicFieldWrite The new ReportBasicField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportBasicFieldsPost: async (reportBasicFieldJsonldReportBasicFieldWrite: ReportBasicFieldJsonldReportBasicFieldWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportBasicFieldJsonldReportBasicFieldWrite' is not null or undefined
            assertParamExists('apiReportBasicFieldsPost', 'reportBasicFieldJsonldReportBasicFieldWrite', reportBasicFieldJsonldReportBasicFieldWrite)
            const localVarPath = `/report_basic_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportBasicFieldJsonldReportBasicFieldWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportBasicFieldApi - functional programming interface
 * @export
 */
export const ReportBasicFieldApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportBasicFieldApiAxiosParamCreator(configuration)
    return {
        /**
         * Replaces the ReportBasicField resource.
         * @summary Replaces the ReportBasicField resource.
         * @param {string} id ReportBasicField identifier
         * @param {ReportBasicFieldJsonldReportBasicFieldWrite} reportBasicFieldJsonldReportBasicFieldWrite The updated ReportBasicField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportBasicFieldsIdPut(id: string, reportBasicFieldJsonldReportBasicFieldWrite: ReportBasicFieldJsonldReportBasicFieldWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportBasicFieldJsonldReportBasicFieldRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportBasicFieldsIdPut(id, reportBasicFieldJsonldReportBasicFieldWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ReportBasicField resource.
         * @summary Creates a ReportBasicField resource.
         * @param {ReportBasicFieldJsonldReportBasicFieldWrite} reportBasicFieldJsonldReportBasicFieldWrite The new ReportBasicField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportBasicFieldsPost(reportBasicFieldJsonldReportBasicFieldWrite: ReportBasicFieldJsonldReportBasicFieldWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportBasicFieldJsonldReportBasicFieldRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportBasicFieldsPost(reportBasicFieldJsonldReportBasicFieldWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportBasicFieldApi - factory interface
 * @export
 */
export const ReportBasicFieldApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportBasicFieldApiFp(configuration)
    return {
        /**
         * Replaces the ReportBasicField resource.
         * @summary Replaces the ReportBasicField resource.
         * @param {string} id ReportBasicField identifier
         * @param {ReportBasicFieldJsonldReportBasicFieldWrite} reportBasicFieldJsonldReportBasicFieldWrite The updated ReportBasicField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportBasicFieldsIdPut(id: string, reportBasicFieldJsonldReportBasicFieldWrite: ReportBasicFieldJsonldReportBasicFieldWrite, options?: any): AxiosPromise<ReportBasicFieldJsonldReportBasicFieldRead> {
            return localVarFp.apiReportBasicFieldsIdPut(id, reportBasicFieldJsonldReportBasicFieldWrite, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ReportBasicField resource.
         * @summary Creates a ReportBasicField resource.
         * @param {ReportBasicFieldJsonldReportBasicFieldWrite} reportBasicFieldJsonldReportBasicFieldWrite The new ReportBasicField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportBasicFieldsPost(reportBasicFieldJsonldReportBasicFieldWrite: ReportBasicFieldJsonldReportBasicFieldWrite, options?: any): AxiosPromise<ReportBasicFieldJsonldReportBasicFieldRead> {
            return localVarFp.apiReportBasicFieldsPost(reportBasicFieldJsonldReportBasicFieldWrite, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportBasicFieldApi - object-oriented interface
 * @export
 * @class ReportBasicFieldApi
 * @extends {BaseAPI}
 */
export class ReportBasicFieldApi extends BaseAPI {
    /**
     * Replaces the ReportBasicField resource.
     * @summary Replaces the ReportBasicField resource.
     * @param {string} id ReportBasicField identifier
     * @param {ReportBasicFieldJsonldReportBasicFieldWrite} reportBasicFieldJsonldReportBasicFieldWrite The updated ReportBasicField resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportBasicFieldApi
     */
    public apiReportBasicFieldsIdPut(id: string, reportBasicFieldJsonldReportBasicFieldWrite: ReportBasicFieldJsonldReportBasicFieldWrite, options?: AxiosRequestConfig) {
        return ReportBasicFieldApiFp(this.configuration).apiReportBasicFieldsIdPut(id, reportBasicFieldJsonldReportBasicFieldWrite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ReportBasicField resource.
     * @summary Creates a ReportBasicField resource.
     * @param {ReportBasicFieldJsonldReportBasicFieldWrite} reportBasicFieldJsonldReportBasicFieldWrite The new ReportBasicField resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportBasicFieldApi
     */
    public apiReportBasicFieldsPost(reportBasicFieldJsonldReportBasicFieldWrite: ReportBasicFieldJsonldReportBasicFieldWrite, options?: AxiosRequestConfig) {
        return ReportBasicFieldApiFp(this.configuration).apiReportBasicFieldsPost(reportBasicFieldJsonldReportBasicFieldWrite, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportFieldApi - axios parameter creator
 * @export
 */
export const ReportFieldApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of ReportField resources.
         * @summary Retrieves the collection of ReportField resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportFieldsGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/report_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ReportField resource.
         * @summary Retrieves a ReportField resource.
         * @param {string} id ReportField identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportFieldsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportFieldsIdGet', 'id', id)
            const localVarPath = `/report_fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportFieldApi - functional programming interface
 * @export
 */
export const ReportFieldApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportFieldApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of ReportField resources.
         * @summary Retrieves the collection of ReportField resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportFieldsGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiReportFieldsGetCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportFieldsGetCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ReportField resource.
         * @summary Retrieves a ReportField resource.
         * @param {string} id ReportField identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportFieldsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportFieldJsonldReportFieldRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportFieldsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportFieldApi - factory interface
 * @export
 */
export const ReportFieldApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportFieldApiFp(configuration)
    return {
        /**
         * Retrieves the collection of ReportField resources.
         * @summary Retrieves the collection of ReportField resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportFieldsGetCollection(page?: number, options?: any): AxiosPromise<ApiReportFieldsGetCollection200Response> {
            return localVarFp.apiReportFieldsGetCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ReportField resource.
         * @summary Retrieves a ReportField resource.
         * @param {string} id ReportField identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportFieldsIdGet(id: string, options?: any): AxiosPromise<ReportFieldJsonldReportFieldRead> {
            return localVarFp.apiReportFieldsIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportFieldApi - object-oriented interface
 * @export
 * @class ReportFieldApi
 * @extends {BaseAPI}
 */
export class ReportFieldApi extends BaseAPI {
    /**
     * Retrieves the collection of ReportField resources.
     * @summary Retrieves the collection of ReportField resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportFieldApi
     */
    public apiReportFieldsGetCollection(page?: number, options?: AxiosRequestConfig) {
        return ReportFieldApiFp(this.configuration).apiReportFieldsGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ReportField resource.
     * @summary Retrieves a ReportField resource.
     * @param {string} id ReportField identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportFieldApi
     */
    public apiReportFieldsIdGet(id: string, options?: AxiosRequestConfig) {
        return ReportFieldApiFp(this.configuration).apiReportFieldsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportFileFieldApi - axios parameter creator
 * @export
 */
export const ReportFileFieldApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Replaces the ReportFileField resource.
         * @summary Replaces the ReportFileField resource.
         * @param {string} id ReportFileField identifier
         * @param {ReportFileFieldJsonldReportFileFieldWrite} reportFileFieldJsonldReportFileFieldWrite The updated ReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportFileFieldsIdPut: async (id: string, reportFileFieldJsonldReportFileFieldWrite: ReportFileFieldJsonldReportFileFieldWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportFileFieldsIdPut', 'id', id)
            // verify required parameter 'reportFileFieldJsonldReportFileFieldWrite' is not null or undefined
            assertParamExists('apiReportFileFieldsIdPut', 'reportFileFieldJsonldReportFileFieldWrite', reportFileFieldJsonldReportFileFieldWrite)
            const localVarPath = `/report_file_fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportFileFieldJsonldReportFileFieldWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ReportFileField resource.
         * @summary Creates a ReportFileField resource.
         * @param {ReportFileFieldJsonldReportFileFieldWrite} reportFileFieldJsonldReportFileFieldWrite The new ReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportFileFieldsPost: async (reportFileFieldJsonldReportFileFieldWrite: ReportFileFieldJsonldReportFileFieldWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportFileFieldJsonldReportFileFieldWrite' is not null or undefined
            assertParamExists('apiReportFileFieldsPost', 'reportFileFieldJsonldReportFileFieldWrite', reportFileFieldJsonldReportFileFieldWrite)
            const localVarPath = `/report_file_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportFileFieldJsonldReportFileFieldWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportFileFieldApi - functional programming interface
 * @export
 */
export const ReportFileFieldApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportFileFieldApiAxiosParamCreator(configuration)
    return {
        /**
         * Replaces the ReportFileField resource.
         * @summary Replaces the ReportFileField resource.
         * @param {string} id ReportFileField identifier
         * @param {ReportFileFieldJsonldReportFileFieldWrite} reportFileFieldJsonldReportFileFieldWrite The updated ReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportFileFieldsIdPut(id: string, reportFileFieldJsonldReportFileFieldWrite: ReportFileFieldJsonldReportFileFieldWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportFileFieldJsonldReportFileFieldRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportFileFieldsIdPut(id, reportFileFieldJsonldReportFileFieldWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ReportFileField resource.
         * @summary Creates a ReportFileField resource.
         * @param {ReportFileFieldJsonldReportFileFieldWrite} reportFileFieldJsonldReportFileFieldWrite The new ReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportFileFieldsPost(reportFileFieldJsonldReportFileFieldWrite: ReportFileFieldJsonldReportFileFieldWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportFileFieldJsonldReportFileFieldRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportFileFieldsPost(reportFileFieldJsonldReportFileFieldWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportFileFieldApi - factory interface
 * @export
 */
export const ReportFileFieldApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportFileFieldApiFp(configuration)
    return {
        /**
         * Replaces the ReportFileField resource.
         * @summary Replaces the ReportFileField resource.
         * @param {string} id ReportFileField identifier
         * @param {ReportFileFieldJsonldReportFileFieldWrite} reportFileFieldJsonldReportFileFieldWrite The updated ReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportFileFieldsIdPut(id: string, reportFileFieldJsonldReportFileFieldWrite: ReportFileFieldJsonldReportFileFieldWrite, options?: any): AxiosPromise<ReportFileFieldJsonldReportFileFieldRead> {
            return localVarFp.apiReportFileFieldsIdPut(id, reportFileFieldJsonldReportFileFieldWrite, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ReportFileField resource.
         * @summary Creates a ReportFileField resource.
         * @param {ReportFileFieldJsonldReportFileFieldWrite} reportFileFieldJsonldReportFileFieldWrite The new ReportFileField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportFileFieldsPost(reportFileFieldJsonldReportFileFieldWrite: ReportFileFieldJsonldReportFileFieldWrite, options?: any): AxiosPromise<ReportFileFieldJsonldReportFileFieldRead> {
            return localVarFp.apiReportFileFieldsPost(reportFileFieldJsonldReportFileFieldWrite, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportFileFieldApi - object-oriented interface
 * @export
 * @class ReportFileFieldApi
 * @extends {BaseAPI}
 */
export class ReportFileFieldApi extends BaseAPI {
    /**
     * Replaces the ReportFileField resource.
     * @summary Replaces the ReportFileField resource.
     * @param {string} id ReportFileField identifier
     * @param {ReportFileFieldJsonldReportFileFieldWrite} reportFileFieldJsonldReportFileFieldWrite The updated ReportFileField resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportFileFieldApi
     */
    public apiReportFileFieldsIdPut(id: string, reportFileFieldJsonldReportFileFieldWrite: ReportFileFieldJsonldReportFileFieldWrite, options?: AxiosRequestConfig) {
        return ReportFileFieldApiFp(this.configuration).apiReportFileFieldsIdPut(id, reportFileFieldJsonldReportFileFieldWrite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ReportFileField resource.
     * @summary Creates a ReportFileField resource.
     * @param {ReportFileFieldJsonldReportFileFieldWrite} reportFileFieldJsonldReportFileFieldWrite The new ReportFileField resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportFileFieldApi
     */
    public apiReportFileFieldsPost(reportFileFieldJsonldReportFileFieldWrite: ReportFileFieldJsonldReportFileFieldWrite, options?: AxiosRequestConfig) {
        return ReportFileFieldApiFp(this.configuration).apiReportFileFieldsPost(reportFileFieldJsonldReportFileFieldWrite, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportFilterFieldApi - axios parameter creator
 * @export
 */
export const ReportFilterFieldApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Replaces the ReportFilterField resource.
         * @summary Replaces the ReportFilterField resource.
         * @param {string} id ReportFilterField identifier
         * @param {ReportFilterFieldJsonldReportFilterFieldWrite} reportFilterFieldJsonldReportFilterFieldWrite The updated ReportFilterField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportFilterFieldsIdPut: async (id: string, reportFilterFieldJsonldReportFilterFieldWrite: ReportFilterFieldJsonldReportFilterFieldWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportFilterFieldsIdPut', 'id', id)
            // verify required parameter 'reportFilterFieldJsonldReportFilterFieldWrite' is not null or undefined
            assertParamExists('apiReportFilterFieldsIdPut', 'reportFilterFieldJsonldReportFilterFieldWrite', reportFilterFieldJsonldReportFilterFieldWrite)
            const localVarPath = `/report_filter_fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportFilterFieldJsonldReportFilterFieldWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ReportFilterField resource.
         * @summary Creates a ReportFilterField resource.
         * @param {ReportFilterFieldJsonldReportFilterFieldWrite} reportFilterFieldJsonldReportFilterFieldWrite The new ReportFilterField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportFilterFieldsPost: async (reportFilterFieldJsonldReportFilterFieldWrite: ReportFilterFieldJsonldReportFilterFieldWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportFilterFieldJsonldReportFilterFieldWrite' is not null or undefined
            assertParamExists('apiReportFilterFieldsPost', 'reportFilterFieldJsonldReportFilterFieldWrite', reportFilterFieldJsonldReportFilterFieldWrite)
            const localVarPath = `/report_filter_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportFilterFieldJsonldReportFilterFieldWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportFilterFieldApi - functional programming interface
 * @export
 */
export const ReportFilterFieldApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportFilterFieldApiAxiosParamCreator(configuration)
    return {
        /**
         * Replaces the ReportFilterField resource.
         * @summary Replaces the ReportFilterField resource.
         * @param {string} id ReportFilterField identifier
         * @param {ReportFilterFieldJsonldReportFilterFieldWrite} reportFilterFieldJsonldReportFilterFieldWrite The updated ReportFilterField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportFilterFieldsIdPut(id: string, reportFilterFieldJsonldReportFilterFieldWrite: ReportFilterFieldJsonldReportFilterFieldWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportFilterFieldJsonldReportFilterFieldRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportFilterFieldsIdPut(id, reportFilterFieldJsonldReportFilterFieldWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ReportFilterField resource.
         * @summary Creates a ReportFilterField resource.
         * @param {ReportFilterFieldJsonldReportFilterFieldWrite} reportFilterFieldJsonldReportFilterFieldWrite The new ReportFilterField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportFilterFieldsPost(reportFilterFieldJsonldReportFilterFieldWrite: ReportFilterFieldJsonldReportFilterFieldWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportFilterFieldJsonldReportFilterFieldRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportFilterFieldsPost(reportFilterFieldJsonldReportFilterFieldWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportFilterFieldApi - factory interface
 * @export
 */
export const ReportFilterFieldApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportFilterFieldApiFp(configuration)
    return {
        /**
         * Replaces the ReportFilterField resource.
         * @summary Replaces the ReportFilterField resource.
         * @param {string} id ReportFilterField identifier
         * @param {ReportFilterFieldJsonldReportFilterFieldWrite} reportFilterFieldJsonldReportFilterFieldWrite The updated ReportFilterField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportFilterFieldsIdPut(id: string, reportFilterFieldJsonldReportFilterFieldWrite: ReportFilterFieldJsonldReportFilterFieldWrite, options?: any): AxiosPromise<ReportFilterFieldJsonldReportFilterFieldRead> {
            return localVarFp.apiReportFilterFieldsIdPut(id, reportFilterFieldJsonldReportFilterFieldWrite, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ReportFilterField resource.
         * @summary Creates a ReportFilterField resource.
         * @param {ReportFilterFieldJsonldReportFilterFieldWrite} reportFilterFieldJsonldReportFilterFieldWrite The new ReportFilterField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportFilterFieldsPost(reportFilterFieldJsonldReportFilterFieldWrite: ReportFilterFieldJsonldReportFilterFieldWrite, options?: any): AxiosPromise<ReportFilterFieldJsonldReportFilterFieldRead> {
            return localVarFp.apiReportFilterFieldsPost(reportFilterFieldJsonldReportFilterFieldWrite, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportFilterFieldApi - object-oriented interface
 * @export
 * @class ReportFilterFieldApi
 * @extends {BaseAPI}
 */
export class ReportFilterFieldApi extends BaseAPI {
    /**
     * Replaces the ReportFilterField resource.
     * @summary Replaces the ReportFilterField resource.
     * @param {string} id ReportFilterField identifier
     * @param {ReportFilterFieldJsonldReportFilterFieldWrite} reportFilterFieldJsonldReportFilterFieldWrite The updated ReportFilterField resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportFilterFieldApi
     */
    public apiReportFilterFieldsIdPut(id: string, reportFilterFieldJsonldReportFilterFieldWrite: ReportFilterFieldJsonldReportFilterFieldWrite, options?: AxiosRequestConfig) {
        return ReportFilterFieldApiFp(this.configuration).apiReportFilterFieldsIdPut(id, reportFilterFieldJsonldReportFilterFieldWrite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ReportFilterField resource.
     * @summary Creates a ReportFilterField resource.
     * @param {ReportFilterFieldJsonldReportFilterFieldWrite} reportFilterFieldJsonldReportFilterFieldWrite The new ReportFilterField resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportFilterFieldApi
     */
    public apiReportFilterFieldsPost(reportFilterFieldJsonldReportFilterFieldWrite: ReportFilterFieldJsonldReportFilterFieldWrite, options?: AxiosRequestConfig) {
        return ReportFilterFieldApiFp(this.configuration).apiReportFilterFieldsPost(reportFilterFieldJsonldReportFilterFieldWrite, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportSectionApi - axios parameter creator
 * @export
 */
export const ReportSectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the ReportSection resource.
         * @summary Removes the ReportSection resource.
         * @param {string} id ReportSection identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSectionsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportSectionsIdDelete', 'id', id)
            const localVarPath = `/report_sections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the ReportSection resource.
         * @summary Replaces the ReportSection resource.
         * @param {string} id ReportSection identifier
         * @param {ReportSectionJsonldReportSectionWrite} reportSectionJsonldReportSectionWrite The updated ReportSection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSectionsIdPut: async (id: string, reportSectionJsonldReportSectionWrite: ReportSectionJsonldReportSectionWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportSectionsIdPut', 'id', id)
            // verify required parameter 'reportSectionJsonldReportSectionWrite' is not null or undefined
            assertParamExists('apiReportSectionsIdPut', 'reportSectionJsonldReportSectionWrite', reportSectionJsonldReportSectionWrite)
            const localVarPath = `/report_sections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportSectionJsonldReportSectionWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ReportSection resource.
         * @summary Creates a ReportSection resource.
         * @param {ReportSectionJsonldReportSectionWrite} reportSectionJsonldReportSectionWrite The new ReportSection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSectionsPost: async (reportSectionJsonldReportSectionWrite: ReportSectionJsonldReportSectionWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportSectionJsonldReportSectionWrite' is not null or undefined
            assertParamExists('apiReportSectionsPost', 'reportSectionJsonldReportSectionWrite', reportSectionJsonldReportSectionWrite)
            const localVarPath = `/report_sections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportSectionJsonldReportSectionWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportSectionApi - functional programming interface
 * @export
 */
export const ReportSectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportSectionApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the ReportSection resource.
         * @summary Removes the ReportSection resource.
         * @param {string} id ReportSection identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportSectionsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportSectionsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the ReportSection resource.
         * @summary Replaces the ReportSection resource.
         * @param {string} id ReportSection identifier
         * @param {ReportSectionJsonldReportSectionWrite} reportSectionJsonldReportSectionWrite The updated ReportSection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportSectionsIdPut(id: string, reportSectionJsonldReportSectionWrite: ReportSectionJsonldReportSectionWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportSectionJsonldReportSectionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportSectionsIdPut(id, reportSectionJsonldReportSectionWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ReportSection resource.
         * @summary Creates a ReportSection resource.
         * @param {ReportSectionJsonldReportSectionWrite} reportSectionJsonldReportSectionWrite The new ReportSection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportSectionsPost(reportSectionJsonldReportSectionWrite: ReportSectionJsonldReportSectionWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportSectionJsonldReportSectionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportSectionsPost(reportSectionJsonldReportSectionWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportSectionApi - factory interface
 * @export
 */
export const ReportSectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportSectionApiFp(configuration)
    return {
        /**
         * Removes the ReportSection resource.
         * @summary Removes the ReportSection resource.
         * @param {string} id ReportSection identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSectionsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiReportSectionsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the ReportSection resource.
         * @summary Replaces the ReportSection resource.
         * @param {string} id ReportSection identifier
         * @param {ReportSectionJsonldReportSectionWrite} reportSectionJsonldReportSectionWrite The updated ReportSection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSectionsIdPut(id: string, reportSectionJsonldReportSectionWrite: ReportSectionJsonldReportSectionWrite, options?: any): AxiosPromise<ReportSectionJsonldReportSectionRead> {
            return localVarFp.apiReportSectionsIdPut(id, reportSectionJsonldReportSectionWrite, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ReportSection resource.
         * @summary Creates a ReportSection resource.
         * @param {ReportSectionJsonldReportSectionWrite} reportSectionJsonldReportSectionWrite The new ReportSection resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSectionsPost(reportSectionJsonldReportSectionWrite: ReportSectionJsonldReportSectionWrite, options?: any): AxiosPromise<ReportSectionJsonldReportSectionRead> {
            return localVarFp.apiReportSectionsPost(reportSectionJsonldReportSectionWrite, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportSectionApi - object-oriented interface
 * @export
 * @class ReportSectionApi
 * @extends {BaseAPI}
 */
export class ReportSectionApi extends BaseAPI {
    /**
     * Removes the ReportSection resource.
     * @summary Removes the ReportSection resource.
     * @param {string} id ReportSection identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSectionApi
     */
    public apiReportSectionsIdDelete(id: string, options?: AxiosRequestConfig) {
        return ReportSectionApiFp(this.configuration).apiReportSectionsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the ReportSection resource.
     * @summary Replaces the ReportSection resource.
     * @param {string} id ReportSection identifier
     * @param {ReportSectionJsonldReportSectionWrite} reportSectionJsonldReportSectionWrite The updated ReportSection resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSectionApi
     */
    public apiReportSectionsIdPut(id: string, reportSectionJsonldReportSectionWrite: ReportSectionJsonldReportSectionWrite, options?: AxiosRequestConfig) {
        return ReportSectionApiFp(this.configuration).apiReportSectionsIdPut(id, reportSectionJsonldReportSectionWrite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ReportSection resource.
     * @summary Creates a ReportSection resource.
     * @param {ReportSectionJsonldReportSectionWrite} reportSectionJsonldReportSectionWrite The new ReportSection resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSectionApi
     */
    public apiReportSectionsPost(reportSectionJsonldReportSectionWrite: ReportSectionJsonldReportSectionWrite, options?: AxiosRequestConfig) {
        return ReportSectionApiFp(this.configuration).apiReportSectionsPost(reportSectionJsonldReportSectionWrite, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportSelectableFieldApi - axios parameter creator
 * @export
 */
export const ReportSelectableFieldApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Replaces the ReportSelectableField resource.
         * @summary Replaces the ReportSelectableField resource.
         * @param {string} id ReportSelectableField identifier
         * @param {ReportSelectableFieldJsonldReportSelectableFieldWrite} reportSelectableFieldJsonldReportSelectableFieldWrite The updated ReportSelectableField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSelectableFieldsIdPut: async (id: string, reportSelectableFieldJsonldReportSelectableFieldWrite: ReportSelectableFieldJsonldReportSelectableFieldWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportSelectableFieldsIdPut', 'id', id)
            // verify required parameter 'reportSelectableFieldJsonldReportSelectableFieldWrite' is not null or undefined
            assertParamExists('apiReportSelectableFieldsIdPut', 'reportSelectableFieldJsonldReportSelectableFieldWrite', reportSelectableFieldJsonldReportSelectableFieldWrite)
            const localVarPath = `/report_selectable_fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportSelectableFieldJsonldReportSelectableFieldWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ReportSelectableField resource.
         * @summary Creates a ReportSelectableField resource.
         * @param {ReportSelectableFieldJsonldReportSelectableFieldWrite} reportSelectableFieldJsonldReportSelectableFieldWrite The new ReportSelectableField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSelectableFieldsPost: async (reportSelectableFieldJsonldReportSelectableFieldWrite: ReportSelectableFieldJsonldReportSelectableFieldWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportSelectableFieldJsonldReportSelectableFieldWrite' is not null or undefined
            assertParamExists('apiReportSelectableFieldsPost', 'reportSelectableFieldJsonldReportSelectableFieldWrite', reportSelectableFieldJsonldReportSelectableFieldWrite)
            const localVarPath = `/report_selectable_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportSelectableFieldJsonldReportSelectableFieldWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportSelectableFieldApi - functional programming interface
 * @export
 */
export const ReportSelectableFieldApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportSelectableFieldApiAxiosParamCreator(configuration)
    return {
        /**
         * Replaces the ReportSelectableField resource.
         * @summary Replaces the ReportSelectableField resource.
         * @param {string} id ReportSelectableField identifier
         * @param {ReportSelectableFieldJsonldReportSelectableFieldWrite} reportSelectableFieldJsonldReportSelectableFieldWrite The updated ReportSelectableField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportSelectableFieldsIdPut(id: string, reportSelectableFieldJsonldReportSelectableFieldWrite: ReportSelectableFieldJsonldReportSelectableFieldWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportSelectableFieldJsonldReportSelectableFieldRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportSelectableFieldsIdPut(id, reportSelectableFieldJsonldReportSelectableFieldWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ReportSelectableField resource.
         * @summary Creates a ReportSelectableField resource.
         * @param {ReportSelectableFieldJsonldReportSelectableFieldWrite} reportSelectableFieldJsonldReportSelectableFieldWrite The new ReportSelectableField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportSelectableFieldsPost(reportSelectableFieldJsonldReportSelectableFieldWrite: ReportSelectableFieldJsonldReportSelectableFieldWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportSelectableFieldJsonldReportSelectableFieldRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportSelectableFieldsPost(reportSelectableFieldJsonldReportSelectableFieldWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportSelectableFieldApi - factory interface
 * @export
 */
export const ReportSelectableFieldApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportSelectableFieldApiFp(configuration)
    return {
        /**
         * Replaces the ReportSelectableField resource.
         * @summary Replaces the ReportSelectableField resource.
         * @param {string} id ReportSelectableField identifier
         * @param {ReportSelectableFieldJsonldReportSelectableFieldWrite} reportSelectableFieldJsonldReportSelectableFieldWrite The updated ReportSelectableField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSelectableFieldsIdPut(id: string, reportSelectableFieldJsonldReportSelectableFieldWrite: ReportSelectableFieldJsonldReportSelectableFieldWrite, options?: any): AxiosPromise<ReportSelectableFieldJsonldReportSelectableFieldRead> {
            return localVarFp.apiReportSelectableFieldsIdPut(id, reportSelectableFieldJsonldReportSelectableFieldWrite, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ReportSelectableField resource.
         * @summary Creates a ReportSelectableField resource.
         * @param {ReportSelectableFieldJsonldReportSelectableFieldWrite} reportSelectableFieldJsonldReportSelectableFieldWrite The new ReportSelectableField resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSelectableFieldsPost(reportSelectableFieldJsonldReportSelectableFieldWrite: ReportSelectableFieldJsonldReportSelectableFieldWrite, options?: any): AxiosPromise<ReportSelectableFieldJsonldReportSelectableFieldRead> {
            return localVarFp.apiReportSelectableFieldsPost(reportSelectableFieldJsonldReportSelectableFieldWrite, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportSelectableFieldApi - object-oriented interface
 * @export
 * @class ReportSelectableFieldApi
 * @extends {BaseAPI}
 */
export class ReportSelectableFieldApi extends BaseAPI {
    /**
     * Replaces the ReportSelectableField resource.
     * @summary Replaces the ReportSelectableField resource.
     * @param {string} id ReportSelectableField identifier
     * @param {ReportSelectableFieldJsonldReportSelectableFieldWrite} reportSelectableFieldJsonldReportSelectableFieldWrite The updated ReportSelectableField resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSelectableFieldApi
     */
    public apiReportSelectableFieldsIdPut(id: string, reportSelectableFieldJsonldReportSelectableFieldWrite: ReportSelectableFieldJsonldReportSelectableFieldWrite, options?: AxiosRequestConfig) {
        return ReportSelectableFieldApiFp(this.configuration).apiReportSelectableFieldsIdPut(id, reportSelectableFieldJsonldReportSelectableFieldWrite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ReportSelectableField resource.
     * @summary Creates a ReportSelectableField resource.
     * @param {ReportSelectableFieldJsonldReportSelectableFieldWrite} reportSelectableFieldJsonldReportSelectableFieldWrite The new ReportSelectableField resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSelectableFieldApi
     */
    public apiReportSelectableFieldsPost(reportSelectableFieldJsonldReportSelectableFieldWrite: ReportSelectableFieldJsonldReportSelectableFieldWrite, options?: AxiosRequestConfig) {
        return ReportSelectableFieldApiFp(this.configuration).apiReportSelectableFieldsPost(reportSelectableFieldJsonldReportSelectableFieldWrite, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportTemplateApi - axios parameter creator
 * @export
 */
export const ReportTemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of ReportTemplate resources.
         * @summary Retrieves the collection of ReportTemplate resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportTemplatesGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/report_templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the ReportTemplate resource.
         * @summary Removes the ReportTemplate resource.
         * @param {string} id ReportTemplate identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportTemplatesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportTemplatesIdDelete', 'id', id)
            const localVarPath = `/report_templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ReportTemplate resource.
         * @summary Retrieves a ReportTemplate resource.
         * @param {string} id ReportTemplate identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportTemplatesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportTemplatesIdGet', 'id', id)
            const localVarPath = `/report_templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the ReportTemplate resource.
         * @summary Updates the ReportTemplate resource.
         * @param {string} id ReportTemplate identifier
         * @param {ReportTemplateReportWrite} reportTemplateReportWrite The updated ReportTemplate resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportTemplatesIdPatch: async (id: string, reportTemplateReportWrite: ReportTemplateReportWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportTemplatesIdPatch', 'id', id)
            // verify required parameter 'reportTemplateReportWrite' is not null or undefined
            assertParamExists('apiReportTemplatesIdPatch', 'reportTemplateReportWrite', reportTemplateReportWrite)
            const localVarPath = `/report_templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportTemplateReportWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the ReportTemplate resource.
         * @summary Replaces the ReportTemplate resource.
         * @param {string} id ReportTemplate identifier
         * @param {ReportTemplateJsonldReportWrite} reportTemplateJsonldReportWrite The updated ReportTemplate resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportTemplatesIdPut: async (id: string, reportTemplateJsonldReportWrite: ReportTemplateJsonldReportWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReportTemplatesIdPut', 'id', id)
            // verify required parameter 'reportTemplateJsonldReportWrite' is not null or undefined
            assertParamExists('apiReportTemplatesIdPut', 'reportTemplateJsonldReportWrite', reportTemplateJsonldReportWrite)
            const localVarPath = `/report_templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportTemplateJsonldReportWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ReportTemplate resource.
         * @summary Creates a ReportTemplate resource.
         * @param {ReportTemplateJsonldReportWrite} reportTemplateJsonldReportWrite The new ReportTemplate resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportTemplatesPost: async (reportTemplateJsonldReportWrite: ReportTemplateJsonldReportWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportTemplateJsonldReportWrite' is not null or undefined
            assertParamExists('apiReportTemplatesPost', 'reportTemplateJsonldReportWrite', reportTemplateJsonldReportWrite)
            const localVarPath = `/report_templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportTemplateJsonldReportWrite, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportTemplateApi - functional programming interface
 * @export
 */
export const ReportTemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportTemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of ReportTemplate resources.
         * @summary Retrieves the collection of ReportTemplate resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportTemplatesGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiReportTemplatesGetCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportTemplatesGetCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the ReportTemplate resource.
         * @summary Removes the ReportTemplate resource.
         * @param {string} id ReportTemplate identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportTemplatesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportTemplatesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ReportTemplate resource.
         * @summary Retrieves a ReportTemplate resource.
         * @param {string} id ReportTemplate identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportTemplatesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportTemplateJsonldReportRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportTemplatesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the ReportTemplate resource.
         * @summary Updates the ReportTemplate resource.
         * @param {string} id ReportTemplate identifier
         * @param {ReportTemplateReportWrite} reportTemplateReportWrite The updated ReportTemplate resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportTemplatesIdPatch(id: string, reportTemplateReportWrite: ReportTemplateReportWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportTemplateJsonldReportRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportTemplatesIdPatch(id, reportTemplateReportWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the ReportTemplate resource.
         * @summary Replaces the ReportTemplate resource.
         * @param {string} id ReportTemplate identifier
         * @param {ReportTemplateJsonldReportWrite} reportTemplateJsonldReportWrite The updated ReportTemplate resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportTemplatesIdPut(id: string, reportTemplateJsonldReportWrite: ReportTemplateJsonldReportWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportTemplateJsonldReportRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportTemplatesIdPut(id, reportTemplateJsonldReportWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ReportTemplate resource.
         * @summary Creates a ReportTemplate resource.
         * @param {ReportTemplateJsonldReportWrite} reportTemplateJsonldReportWrite The new ReportTemplate resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportTemplatesPost(reportTemplateJsonldReportWrite: ReportTemplateJsonldReportWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportTemplateJsonldReportRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReportTemplatesPost(reportTemplateJsonldReportWrite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportTemplateApi - factory interface
 * @export
 */
export const ReportTemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportTemplateApiFp(configuration)
    return {
        /**
         * Retrieves the collection of ReportTemplate resources.
         * @summary Retrieves the collection of ReportTemplate resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportTemplatesGetCollection(page?: number, options?: any): AxiosPromise<ApiReportTemplatesGetCollection200Response> {
            return localVarFp.apiReportTemplatesGetCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the ReportTemplate resource.
         * @summary Removes the ReportTemplate resource.
         * @param {string} id ReportTemplate identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportTemplatesIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiReportTemplatesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ReportTemplate resource.
         * @summary Retrieves a ReportTemplate resource.
         * @param {string} id ReportTemplate identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportTemplatesIdGet(id: string, options?: any): AxiosPromise<ReportTemplateJsonldReportRead> {
            return localVarFp.apiReportTemplatesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the ReportTemplate resource.
         * @summary Updates the ReportTemplate resource.
         * @param {string} id ReportTemplate identifier
         * @param {ReportTemplateReportWrite} reportTemplateReportWrite The updated ReportTemplate resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportTemplatesIdPatch(id: string, reportTemplateReportWrite: ReportTemplateReportWrite, options?: any): AxiosPromise<ReportTemplateJsonldReportRead> {
            return localVarFp.apiReportTemplatesIdPatch(id, reportTemplateReportWrite, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the ReportTemplate resource.
         * @summary Replaces the ReportTemplate resource.
         * @param {string} id ReportTemplate identifier
         * @param {ReportTemplateJsonldReportWrite} reportTemplateJsonldReportWrite The updated ReportTemplate resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportTemplatesIdPut(id: string, reportTemplateJsonldReportWrite: ReportTemplateJsonldReportWrite, options?: any): AxiosPromise<ReportTemplateJsonldReportRead> {
            return localVarFp.apiReportTemplatesIdPut(id, reportTemplateJsonldReportWrite, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ReportTemplate resource.
         * @summary Creates a ReportTemplate resource.
         * @param {ReportTemplateJsonldReportWrite} reportTemplateJsonldReportWrite The new ReportTemplate resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportTemplatesPost(reportTemplateJsonldReportWrite: ReportTemplateJsonldReportWrite, options?: any): AxiosPromise<ReportTemplateJsonldReportRead> {
            return localVarFp.apiReportTemplatesPost(reportTemplateJsonldReportWrite, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportTemplateApi - object-oriented interface
 * @export
 * @class ReportTemplateApi
 * @extends {BaseAPI}
 */
export class ReportTemplateApi extends BaseAPI {
    /**
     * Retrieves the collection of ReportTemplate resources.
     * @summary Retrieves the collection of ReportTemplate resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportTemplateApi
     */
    public apiReportTemplatesGetCollection(page?: number, options?: AxiosRequestConfig) {
        return ReportTemplateApiFp(this.configuration).apiReportTemplatesGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the ReportTemplate resource.
     * @summary Removes the ReportTemplate resource.
     * @param {string} id ReportTemplate identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportTemplateApi
     */
    public apiReportTemplatesIdDelete(id: string, options?: AxiosRequestConfig) {
        return ReportTemplateApiFp(this.configuration).apiReportTemplatesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ReportTemplate resource.
     * @summary Retrieves a ReportTemplate resource.
     * @param {string} id ReportTemplate identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportTemplateApi
     */
    public apiReportTemplatesIdGet(id: string, options?: AxiosRequestConfig) {
        return ReportTemplateApiFp(this.configuration).apiReportTemplatesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the ReportTemplate resource.
     * @summary Updates the ReportTemplate resource.
     * @param {string} id ReportTemplate identifier
     * @param {ReportTemplateReportWrite} reportTemplateReportWrite The updated ReportTemplate resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportTemplateApi
     */
    public apiReportTemplatesIdPatch(id: string, reportTemplateReportWrite: ReportTemplateReportWrite, options?: AxiosRequestConfig) {
        return ReportTemplateApiFp(this.configuration).apiReportTemplatesIdPatch(id, reportTemplateReportWrite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the ReportTemplate resource.
     * @summary Replaces the ReportTemplate resource.
     * @param {string} id ReportTemplate identifier
     * @param {ReportTemplateJsonldReportWrite} reportTemplateJsonldReportWrite The updated ReportTemplate resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportTemplateApi
     */
    public apiReportTemplatesIdPut(id: string, reportTemplateJsonldReportWrite: ReportTemplateJsonldReportWrite, options?: AxiosRequestConfig) {
        return ReportTemplateApiFp(this.configuration).apiReportTemplatesIdPut(id, reportTemplateJsonldReportWrite, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ReportTemplate resource.
     * @summary Creates a ReportTemplate resource.
     * @param {ReportTemplateJsonldReportWrite} reportTemplateJsonldReportWrite The new ReportTemplate resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportTemplateApi
     */
    public apiReportTemplatesPost(reportTemplateJsonldReportWrite: ReportTemplateJsonldReportWrite, options?: AxiosRequestConfig) {
        return ReportTemplateApiFp(this.configuration).apiReportTemplatesPost(reportTemplateJsonldReportWrite, options).then((request) => request(this.axios, this.basePath));
    }
}

